[{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">JavaScript</a>","text":"<div class=\"page-text\">JavaScript (JS) is a lightweight interpreted or just-in-time compiled programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript (JS tutorial)</a>","text":"<div class=\"page-text\">Why a re-introduction? Because JavaScript is notorious for being the world's most misunderstood programming language. It is often derided as being a toy, but beneath its layer of deceptive simplicity, powerful language features await. JavaScript is now used by an incredible number of high-profile applications, showing that deeper knowledge of this technology is an important skill for any web or mobile developer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/About_JavaScript\">About JavaScript</a>","text":"<div class=\"page-text\">JavaScript® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, and is best known as the scripting language for Web pages, but it's used in many non-browser environments as well. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">Closures</a>","text":"<div class=\"page-text\">A closure is the combination of a function and the lexical environment within which that function was declared.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a>","text":"<div class=\"page-text\">JavaScript has a concurrency model based on an \"event loop\". This model is quite different from models in other languages like C and Java.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Differential_inheritance_in_JavaScript\">Differential inheritance in JavaScript</a>","text":"<div class=\"page-text\">Differential Inheritance is a common prototype-oriented model that uses the concept that most objects are derived from other, more generic objects, and only differ in a few small aspects. Each object maintains a reference to its prototype and a table of properties that are different.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a>","text":"<div class=\"page-text\">Enumerable properties are those properties whose internal enumerable flag is set to true, which is the default for properties created via simple assignment or via a property initializer (properties defined via Object.defineProperty and such default enumerable to false). Enumerable properties show up in for...in loops unless the property's key is a Symbol. Ownership of properties is determined by whether the property belongs to the object directly and not to its prototype chain. Properties of an object can also be retrieved in total. There are a number of built-in means of detecting, iterating/enumerating, and retrieving object properties, with the chart showing which are available. Some sample code follows which demonstrates how to obtain the missing categories.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a>","text":"<div class=\"page-text\">There are four equality algorithms in ES2015:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Index\">Index</a>","text":"<div class=\"page-text\">This page lists all MDN JavaScript pages along with their summary and tags.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a>","text":"<div class=\"page-text\">JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not provide a class implementation per se (the class keyword is introduced in ES2015, but is syntactical sugar, JavaScript remains prototype-based).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_using_XPath_in_JavaScript\">Introduction to using XPath in JavaScript</a>","text":"<div class=\"page-text\">This document describes the interface for using XPath in JavaScript internally, in extensions, and from websites. Mozilla implements a fair amount of the DOM 3 XPath, which means that XPath expressions can be run against both HTML and XML documents.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\">JavaScript Guide</a>","text":"<div class=\"page-text\">The JavaScript Guide shows you how to use JavaScript and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the JavaScript reference.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a>","text":"<div class=\"page-text\">JavaScript supports a compact set of statements, specifically control flow statements, that you can use to incorporate a great deal of interactivity in your application. This chapter provides an overview of these statements.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a>","text":"<div class=\"page-text\">JavaScript is an object-based language based on prototypes, rather than being class-based. Because of this different basis, it can be less apparent how JavaScript allows you to create hierarchies of objects and to have inheritance of properties and their values. This chapter attempts to clarify the situation.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a>","text":"<div class=\"page-text\">This chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\">Functions</a>","text":"<div class=\"page-text\">Functions are one of the fundamental building blocks in JavaScript. A function is a JavaScript procedure—a set of statements that performs a task or calculates a value. To use a function, you must define it somewhere in the scope from which you wish to call it.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types\">Grammar and types</a>","text":"<div class=\"page-text\">This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a>","text":"<div class=\"page-text\">This chapter introduces collections of data which are ordered by an index value. This includes arrays and array-like constructs such as Array objects and TypedArray objects.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction\">Introduction</a>","text":"<div class=\"page-text\">This chapter introduces JavaScript and discusses some of its fundamental concepts.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Iterators and generators</a>","text":"<div class=\"page-text\">Processing each of the items in a collection is a very common operation. JavaScript provides a number of ways of iterating over a collection, from simple for loops to map() and filter(). Iterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of for...of loops.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a>","text":"<div class=\"page-text\">This chapter introduces collections of data which are ordered by a key; Map and Set objects contain elements which are iterable in the order of insertion.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a>","text":"<div class=\"page-text\">Loops offer a quick and easy way to do something repeatedly. This chapter of the JavaScript Guide introduces the different iteration statements available to JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a>","text":"<div class=\"page-text\">Starting with ECMAScript 2015, JavaScript gains support for the Proxy and Reflect objects allowing you to intercept and define custom behavior for fundamental language operations (e.g. property lookup, assignment, enumeration, function invocation, etc). With the help of these two objects you are able to program at the meta level of JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a>","text":"<div class=\"page-text\">This chapter introduces the concepts, objects and functions used to work with and perform calculations using numbers and dates in JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions</a>","text":"<div class=\"page-text\">Regular expressions are patterns used to match character combinations in strings. In JavaScript, regular expressions are also objects. These patterns are used with the exec and test methods of RegExp, and with the match, matchAll, replace, search, and split methods of String. This chapter describes JavaScript regular expressions.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">Assertions</a>","text":"<div class=\"page-text\">Assertions indicate in some way that a match is possible. Assertions include look-ahead, look-behind, and conditional expressions.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Boundaries\">Boundaries</a>","text":"<div class=\"page-text\">Boundaries Indicate the beginnings and endings of lines and words.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes\">Character Classes</a>","text":"<div class=\"page-text\">Character classes distinguish kinds of characters such as, for example, distinguishing between letters and digits.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges\">Groups and Ranges</a>","text":"<div class=\"page-text\">Groups and ranges indicate groups and ranges of expression characters.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers\">Quantifiers</a>","text":"<div class=\"page-text\">Quantifiers indicate numbers of characters or expressions to match.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a>","text":"<div class=\"page-text\">This chapter introduces how to work with strings and text in JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a>","text":"<div class=\"page-text\">A Promise is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a>","text":"<div class=\"page-text\">JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method. In addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, functions, and methods, and how to create your own objects.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">JavaScript data types and data structures</a>","text":"<div class=\"page-text\">Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have; these can be used to build other data structures. Wherever possible, comparisons with other languages are drawn.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources\">JavaScript language resources</a>","text":"<div class=\"page-text\">ECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The following ECMAScript standards have been approved or are being worked on:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\">JavaScript reference</a>","text":"<div class=\"page-text\">This part of the JavaScript section on MDN serves as a repository of facts about the JavaScript language. Read more about this reference.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/About\">About the JavaScript reference</a>","text":"<div class=\"page-text\">The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title \"JavaScript reference\"). If you're learning JavaScript, or need help understanding some of its capabilities or features, check out the JavaScript guide.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">Classes</a>","text":"<div class=\"page-text\">JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a>","text":"<div class=\"page-text\">The constructor method is a special method for creating and initializing an object created within a class.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends\">extends</a>","text":"<div class=\"page-text\">The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\">static</a>","text":"<div class=\"page-text\">The static keyword defines a static method for a class. Static methods aren't called on instances of the class. Instead, they're called on the class itself.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated and obsolete features</a>","text":"<div class=\"page-text\">This page lists features of JavaScript that are deprecated (that is, still available but planned for removal) and obsolete (that is, no longer usable).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features/The_legacy_Iterator_protocol\">The legacy Iterator protocol</a>","text":"<div class=\"page-text\">Firefox, prior to version 26 implemented another iterator protocol that is similar to the standard ES2015 Iterator protocol.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\">Expressions and operators</a>","text":"<div class=\"page-text\">This chapter documents all the JavaScript language operators, expressions and keywords.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\">Arithmetic operators</a>","text":"<div class=\"page-text\">Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions\">Array comprehensions</a>","text":"<div class=\"page-text\">The array comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\">Assignment operators</a>","text":"<div class=\"page-text\">An assignment operator assigns a value to its left operand based on the value of its right operand.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">Bitwise operators</a>","text":"<div class=\"page-text\">Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator</a>","text":"<div class=\"page-text\">The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">Comparison operators</a>","text":"<div class=\"page-text\">JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a>","text":"<div class=\"page-text\">The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a>","text":"<div class=\"page-text\">The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures\">Expression closures</a>","text":"<div class=\"page-text\">Expression closures are a shorthand function syntax for writing simple functions.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions\">Generator comprehensions</a>","text":"<div class=\"page-text\">The generator comprehension syntax was a JavaScript expression which allowed you to quickly assemble a new generator function based on an existing iterable object. However, it has been removed from the standard and the Firefox implementation. Do not use it!</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator</a>","text":"<div class=\"page-text\">The grouping operator ( ) controls the precedence of evaluation in expressions.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function\">Legacy generator function expression</a>","text":"<div class=\"page-text\">The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\">Logical operators</a>","text":"<div class=\"page-text\">Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they will return a non-Boolean value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a>","text":"<div class=\"page-text\">Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a>","text":"<div class=\"page-text\">Operator precedence determines the way in which operators are parsed with respect to each other. Operators with higher precedence become the operands of operators with lower precedence.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Pipeline_operator\">Pipeline operator</a>","text":"<div class=\"page-text\">The experimental pipeline operator |> (currently at stage 1) pipes the value of an expression into a function. This allows the creation of chained function calls in a readable manner. The result is syntactic sugar in which a function call with a single argument can be written like this:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a>","text":"<div class=\"page-text\">Property accessors provide access to an object's properties by using the dot notation or the bracket notation.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax</a>","text":"<div class=\"page-text\">Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a>","text":"<div class=\"page-text\">The async function keyword can be used to define async functions inside expressions.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\">await</a>","text":"<div class=\"page-text\">The await operator is used to wait for a Promise. It can only be used inside an async function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class\">class expression</a>","text":"<div class=\"page-text\">The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes use prototype-based inheritance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a>","text":"<div class=\"page-text\">The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>","text":"<div class=\"page-text\">The function keyword can be used to define a function inside an expression.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a>","text":"<div class=\"page-text\">The function* keyword can be used to define a generator function inside an expression.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\">in operator</a>","text":"<div class=\"page-text\">The in operator returns true if the specified property is in the specified object or its prototype chain.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a>","text":"<div class=\"page-text\">The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">new operator</a>","text":"<div class=\"page-text\">The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a>","text":"<div class=\"page-text\">The new.target property lets you detect whether a function or constructor was called using the new operator. In constructors and functions instantiated with the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\">super</a>","text":"<div class=\"page-text\">The super keyword is used to access and call functions on an object's parent.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a>","text":"<div class=\"page-text\">A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a>","text":"<div class=\"page-text\">The typeof operator returns a string indicating the type of the unevaluated operand.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\">void operator</a>","text":"<div class=\"page-text\">The void operator evaluates the given expression and then returns undefined.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\">yield</a>","text":"<div class=\"page-text\">The yield keyword is used to pause and resume a generator function (function* or legacy generator function).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a>","text":"<div class=\"page-text\">The yield* expression is used to delegate to another generator or iterable object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\">Functions</a>","text":"<div class=\"page-text\">Generally speaking, a function is a \"subprogram\" that can be called by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function, and the function will return a value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a>","text":"<div class=\"page-text\">An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and they cannot be used as constructors.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a>","text":"<div class=\"page-text\">Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a>","text":"<div class=\"page-text\">Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method's name.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a>","text":"<div class=\"page-text\">The rest parameter syntax allows us to represent an indefinite number of arguments as an array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a>","text":"<div class=\"page-text\">arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\">arguments.callee</a>","text":"<div class=\"page-text\">The arguments.callee property contains the currently executing function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/caller\">arguments.caller</a>","text":"<div class=\"page-text\">The obsolete arguments.caller property used to provide the function that invoked the currently executing function. This property has been removed and no longer works.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length\">arguments.length</a>","text":"<div class=\"page-text\">The arguments.length property contains the number of arguments passed to the function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator\">arguments[@@iterator]()</a>","text":"<div class=\"page-text\">The initial value of the @@iterator property is the same function object as the initial value of the Array.prototype.values property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a>","text":"<div class=\"page-text\">The get syntax binds an object property to a function that will be called when that property is looked up.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a>","text":"<div class=\"page-text\">The set syntax binds an object property to a function to be called when there is an attempt to set that property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a>","text":"<div class=\"page-text\">A couple of additions to ECMAScript 2015 aren't new built-ins or syntax, but protocols. These protocols can be implemented by any object respecting some conventions.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors\">JavaScript error reference</a>","text":"<div class=\"page-text\">Below, you'll find a list of errors which are thrown by JavaScript. These errors can be a helpful debugging aid, but the reported problem isn't always immediately clear. The pages below will provide additional details about these errors. Each error is an object based upon the Error object, and has a name and a message.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a>","text":"<div class=\"page-text\">There was attempt to access an object for which you have no permission. This is likely an <iframe> element loaded from a different domain for which you violated the same-origin policy.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a>","text":"<div class=\"page-text\">When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a>","text":"<div class=\"page-text\">String.fromCodePoint() throws this error when passed NaN values, negative Integers (-1), non-Integers (5.4), or values larger than 0x10FFFF (1114111).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a>","text":"<div class=\"page-text\">RangeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a>","text":"<div class=\"page-text\">RangeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a>","text":"<div class=\"page-text\">RangeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a>","text":"<div class=\"page-text\">RangeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a>","text":"<div class=\"page-text\">RangeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a>","text":"<div class=\"page-text\">RangeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a>","text":"<div class=\"page-text\">ReferenceError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a>","text":"<div class=\"page-text\">ReferenceError warning in strict mode only.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration`X' before initialization</a>","text":"<div class=\"page-text\">ReferenceError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a>","text":"<div class=\"page-text\">A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won't be halted.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">ReferenceError: invalid assignment left-hand side</a>","text":"<div class=\"page-text\">ReferenceError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a>","text":"<div class=\"page-text\">(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a>","text":"<div class=\"page-text\">SyntaxError in strict mode only.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a>","text":"<div class=\"page-text\">SyntaxError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a>","text":"<div class=\"page-text\">A warning that a SyntaxError occurred. JavaScript execution won't be halted.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a>","text":"<div class=\"page-text\">SyntaxError in strict mode only.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a>","text":"<div class=\"page-text\">SyntaxError in strict mode only.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a>","text":"<div class=\"page-text\">SyntaxError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a>","text":"<div class=\"page-text\">SyntaxError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a>","text":"<div class=\"page-text\">SyntaxError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a>","text":"<div class=\"page-text\">SyntaxError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a>","text":"<div class=\"page-text\">(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a>","text":"<div class=\"page-text\">SyntaxError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a>","text":"<div class=\"page-text\">TypeError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a>","text":"<div class=\"page-text\">TypeError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a>","text":"<div class=\"page-text\">TypeError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a>","text":"<div class=\"page-text\">TypeError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property\">TypeError: can't access property \"x\" of \"y\"</a>","text":"<div class=\"page-text\">TypeError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a>","text":"<div class=\"page-text\">TypeError.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Typed_array_invalid_arguments\">TypeError: invalid arguments</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a>","text":"<div class=\"page-text\">TypeError in strict mode only.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a>","text":"<div class=\"page-text\">TypeError in strict mode only.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Var_hides_argument\">TypeError: variable \"x\" redeclares argument</a>","text":"<div class=\"page-text\">TypeError warning in strict mode only.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a>","text":"<div class=\"page-text\">URIError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a>","text":"<div class=\"page-text\">A warning. JavaScript execution won't be halted.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a>","text":"<div class=\"page-text\">Warning. JavaScript execution won't be halted.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a>","text":"<div class=\"page-text\">Warning. JavaScript execution won't be halted.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/For-each-in_loops_are_deprecated\">Warning: JavaScript 1.6's for-each-in loops are deprecated</a>","text":"<div class=\"page-text\">Warning</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a>","text":"<div class=\"page-text\">Warning. JavaScript execution won't be halted.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a>","text":"<div class=\"page-text\">Warning. JavaScript execution won't be halted.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a>","text":"<div class=\"page-text\">Warning</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">X.prototype.y called on incompatible type</a>","text":"<div class=\"page-text\">TypeError</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Methods_Index\">JavaScript methods index</a>","text":"<div class=\"page-text\">This article entails a listing of all JavaScript methods documented on MDN sorted alphabetically.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Properties_Index\">JavaScript properties index</a>","text":"<div class=\"page-text\">This article entails a listing of all JavaScript properties documented on MDN sorted alphabetically.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a>","text":"<div class=\"page-text\">This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or white space. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a>","text":"<div class=\"page-text\">This chapter documents all of JavaScript's standard, built-in objects, including their methods and properties.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a>","text":"<div class=\"page-text\">The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">Array.from()</a>","text":"<div class=\"page-text\">The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\">Array.isArray()</a>","text":"<div class=\"page-text\">The Array.isArray() method determines whether the passed value is an Array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\">Array.length</a>","text":"<div class=\"page-text\">The length property of an object which is an instance of type Array sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\">Array.observe()</a>","text":"<div class=\"page-text\">The Array.observe() method was used for asynchronously observing changes to Arrays, similar to Object.observe() for objects. It provided a stream of changes in order of occurrence. It's equivalent to Object.observe() invoked with the accept type list [\"add\", \"update\", \"delete\", \"splice\"]. However, this API has been deprecated and removed from Browsers. You can use the more general Proxy object instead.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\">Array.of()</a>","text":"<div class=\"page-text\">The Array.of() method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\">Array.prototype</a>","text":"<div class=\"page-text\">Array instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Array instances. For example, you can add new methods and properties to extend all Array objects. This is used for polyfilling, for example.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">Array.prototype.concat()</a>","text":"<div class=\"page-text\">The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\">Array.prototype.copyWithin()</a>","text":"<div class=\"page-text\">The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\">Array.prototype.entries()</a>","text":"<div class=\"page-text\">The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">Array.prototype.every()</a>","text":"<div class=\"page-text\">The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\">Array.prototype.fill()</a>","text":"<div class=\"page-text\">The fill() method fills (modifies) all the elements of an array from a start index (default zero) to an end index (default array length) with a static value. It returns the modified array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.prototype.filter()</a>","text":"<div class=\"page-text\">The filter() method creates a new array with all elements that pass the test implemented by the provided function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">Array.prototype.find()</a>","text":"<div class=\"page-text\">The find() method returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\">Array.prototype.findIndex()</a>","text":"<div class=\"page-text\">The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\">Array.prototype.flat()</a>","text":"<div class=\"page-text\">The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\">Array.prototype.flatMap()</a>","text":"<div class=\"page-text\">The flatMap() method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map followed by a flat of depth 1, but flatMap is often quite useful, as merging both into one method is slightly more efficient.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">Array.prototype.forEach()</a>","text":"<div class=\"page-text\">The forEach() method executes a provided function once for each array element.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">Array.prototype.includes()</a>","text":"<div class=\"page-text\">The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">Array.prototype.indexOf()</a>","text":"<div class=\"page-text\">The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\">Array.prototype.join()</a>","text":"<div class=\"page-text\">The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\">Array.prototype.keys()</a>","text":"<div class=\"page-text\">The keys() method returns a new Array Iterator object that contains the keys for each index in the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\">Array.prototype.lastIndexOf()</a>","text":"<div class=\"page-text\">The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.prototype.map()</a>","text":"<div class=\"page-text\">The map() method creates a new array with the results of calling a provided function on every element in the calling array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">Array.prototype.pop()</a>","text":"<div class=\"page-text\">The pop() method removes the last element from an array and returns that element. This method changes the length of the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">Array.prototype.push()</a>","text":"<div class=\"page-text\">The push() method adds one or more elements to the end of an array and returns the new length of the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">Array.prototype.reduce()</a>","text":"<div class=\"page-text\">The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight\">Array.prototype.reduceRight()</a>","text":"<div class=\"page-text\">The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">Array.prototype.reverse()</a>","text":"<div class=\"page-text\">The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">Array.prototype.shift()</a>","text":"<div class=\"page-text\">The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">Array.prototype.slice()</a>","text":"<div class=\"page-text\">The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">Array.prototype.some()</a>","text":"<div class=\"page-text\">The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">Array.prototype.sort()</a>","text":"<div class=\"page-text\">The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">Array.prototype.splice()</a>","text":"<div class=\"page-text\">The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\">Array.prototype.toLocaleString()</a>","text":"<div class=\"page-text\">The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma “,”).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource\">Array.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\">Array.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the specified array and its elements.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\">Array.prototype.unshift()</a>","text":"<div class=\"page-text\">The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values\">Array.prototype.values()</a>","text":"<div class=\"page-text\">The values() method returns a new Array Iterator object that contains the values for each index in the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator\">Array.prototype[@@iterator]()</a>","text":"<div class=\"page-text\">The initial value of the @@iterator property is the same function object as the initial value of the values() property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\">Array.prototype[@@unscopables]</a>","text":"<div class=\"page-text\">The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 version. These properties are excluded from with statement bindings.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unobserve\">Array.unobserve()</a>","text":"<div class=\"page-text\">The Array.unobserve() method was used to remove observers set by Array.observe(), but has been deprecated and removed from Browsers. You can use the more general Proxy object instead.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species\">get Array[@@species]</a>","text":"<div class=\"page-text\">The Array[@@species] accessor property returns the Array constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a>","text":"<div class=\"page-text\">The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an ArrayBuffer; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView\">ArrayBuffer.isView()</a>","text":"<div class=\"page-text\">The ArrayBuffer.isView() method returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView; false otherwise.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/prototype\">ArrayBuffer.prototype</a>","text":"<div class=\"page-text\">The ArrayBuffer.prototype property represents the prototype for the ArrayBuffer object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength\">ArrayBuffer.prototype.byteLength</a>","text":"<div class=\"page-text\">The byteLength accessor property represents the length of an ArrayBuffer in bytes.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice\">ArrayBuffer.prototype.slice()</a>","text":"<div class=\"page-text\">The slice() method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\">ArrayBuffer.transfer()</a>","text":"<div class=\"page-text\">The static ArrayBuffer.transfer() method returns a new ArrayBuffer whose contents have been taken from the oldBuffer's data and then is either truncated or zero-extended by newByteLength. If newByteLength is undefined, the byteLength of the oldBuffer is used. This operation leaves oldBuffer in a detached state.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/@@species\">get ArrayBuffer[@@species]</a>","text":"<div class=\"page-text\">The ArrayBuffer[@@species] accessor property returns the ArrayBuffer constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a>","text":"<div class=\"page-text\">The AsyncFunction constructor creates a new async function object. In JavaScript every asynchronous function is actually an AsyncFunction object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/prototype\">AsyncFunction.prototype</a>","text":"<div class=\"page-text\">The AsyncFunction.prototype property represents the AsyncFunction prototype object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a>","text":"<div class=\"page-text\">The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add\">Atomics.add()</a>","text":"<div class=\"page-text\">The static Atomics.add() method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and\">Atomics.and()</a>","text":"<div class=\"page-text\">The static Atomics.and() method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange\">Atomics.compareExchange()</a>","text":"<div class=\"page-text\">The static Atomics.compareExchange() method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value.  It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange\">Atomics.exchange()</a>","text":"<div class=\"page-text\">The static Atomics.exchange() method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree\">Atomics.isLockFree()</a>","text":"<div class=\"page-text\">The static Atomics.isLockFree() method is used to determine whether to use locks or atomic operations. It returns true, if the given size is one of the BYTES_PER_ELEMENT property of integer TypedArray types.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load\">Atomics.load()</a>","text":"<div class=\"page-text\">The static Atomics.load() method returns a value at a given position in the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify\">Atomics.notify()</a>","text":"<div class=\"page-text\">The static Atomics.notify() method notifies up some agents that are sleeping in the wait queue.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or\">Atomics.or()</a>","text":"<div class=\"page-text\">The static Atomics.or() method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store\">Atomics.store()</a>","text":"<div class=\"page-text\">The static Atomics.store() method stores a given value at the given position in the array and returns that value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub\">Atomics.sub()</a>","text":"<div class=\"page-text\">The static Atomics.sub() method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait\">Atomics.wait()</a>","text":"<div class=\"page-text\">The static Atomics.wait() method verifies that a given position in an Int32Array still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\".</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor\">Atomics.xor()</a>","text":"<div class=\"page-text\">The static Atomics.xor() method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a>","text":"<div class=\"page-text\">BigInt is a built-in object that provides a way to represent whole numbers larger than 253, which is the largest number JavaScript can reliably represent with the Number primitive.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\">BigInt.asIntN()</a>","text":"<div class=\"page-text\">The BigInt.asIntN static method is used to wrap a BigInt between -2width-1 and 2width-1-1.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\">BigInt.asUintN()</a>","text":"<div class=\"page-text\">The BigInt.asUintN static method is used to wrap a BigInt between 0 and 2width-1.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/prototype\">BigInt.prototype</a>","text":"<div class=\"page-text\">The BigInt.prototype property represents the prototype for the BigInt constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>","text":"<div class=\"page-text\">The Boolean object is an object wrapper for a boolean value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/prototype\">Boolean.prototype</a>","text":"<div class=\"page-text\">The Boolean.prototype property represents the prototype for the Boolean constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toSource\">Boolean.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\">Boolean.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the specified Boolean object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf\">Boolean.prototype.valueOf()</a>","text":"<div class=\"page-text\">The valueOf() method returns the primitive value of a Boolean object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a>","text":"<div class=\"page-text\">The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/prototype\">DataView.prototype</a>","text":"<div class=\"page-text\">The DataView.prototype property represents the prototype for the DataView object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer\">DataView.prototype.buffer</a>","text":"<div class=\"page-text\">The buffer accessor property represents the ArrayBuffer or SharedArrayBuffer referenced by the DataView at construction time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength\">DataView.prototype.byteLength</a>","text":"<div class=\"page-text\">The byteLength accessor property represents the length (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset\">DataView.prototype.byteOffset</a>","text":"<div class=\"page-text\">The byteOffset accessor property represents the offset (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32\">DataView.prototype.getFloat32()</a>","text":"<div class=\"page-text\">The getFloat32() method gets a signed 32-bit float (float) at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64\">DataView.prototype.getFloat64()</a>","text":"<div class=\"page-text\">The getFloat64() method gets a signed 64-bit float (double) at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16\">DataView.prototype.getInt16()</a>","text":"<div class=\"page-text\">The getInt16() method gets a signed 16-bit integer (short) at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32\">DataView.prototype.getInt32()</a>","text":"<div class=\"page-text\">The getInt32() method gets a signed 32-bit integer (long) at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8\">DataView.prototype.getInt8()</a>","text":"<div class=\"page-text\">The getInt8() method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16\">DataView.prototype.getUint16()</a>","text":"<div class=\"page-text\">The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32\">DataView.prototype.getUint32()</a>","text":"<div class=\"page-text\">The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8\">DataView.prototype.getUint8()</a>","text":"<div class=\"page-text\">The getUint8() method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32\">DataView.prototype.setFloat32()</a>","text":"<div class=\"page-text\">The setFloat32() method stores a signed 32-bit float (float) value at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64\">DataView.prototype.setFloat64()</a>","text":"<div class=\"page-text\">The setFloat64() method stores a signed 64-bit float (double) value at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16\">DataView.prototype.setInt16()</a>","text":"<div class=\"page-text\">The setInt16() method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32\">DataView.prototype.setInt32()</a>","text":"<div class=\"page-text\">The setInt32() method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8\">DataView.prototype.setInt8()</a>","text":"<div class=\"page-text\">The setInt8() method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16\">DataView.prototype.setUint16()</a>","text":"<div class=\"page-text\">The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32\">DataView.prototype.setUint32()</a>","text":"<div class=\"page-text\">The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8\">DataView.prototype.setUint8()</a>","text":"<div class=\"page-text\">The setUint8() method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the DataView.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a>","text":"<div class=\"page-text\">Creates a JavaScript Date instance that represents a single moment in time in a platform-independent format.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC\">Date.UTC()</a>","text":"<div class=\"page-text\">The Date.UTC() method accepts the same parameters as the Date constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\">Date.now()</a>","text":"<div class=\"page-text\">The Date.now() method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\">Date.parse()</a>","text":"<div class=\"page-text\">The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype\">Date.prototype</a>","text":"<div class=\"page-text\">The Date.prototype property represents the prototype for the Date constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate\">Date.prototype.getDate()</a>","text":"<div class=\"page-text\">The getDate() method returns the day of the month for the specified date according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay\">Date.prototype.getDay()</a>","text":"<div class=\"page-text\">The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday. For the day of the month see getDate().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\">Date.prototype.getFullYear()</a>","text":"<div class=\"page-text\">The getFullYear() method returns the year of the specified date according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours\">Date.prototype.getHours()</a>","text":"<div class=\"page-text\">The getHours() method returns the hour for the specified date, according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\">Date.prototype.getMilliseconds()</a>","text":"<div class=\"page-text\">The getMilliseconds() method returns the milliseconds in the specified date according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes\">Date.prototype.getMinutes()</a>","text":"<div class=\"page-text\">The getMinutes() method returns the minutes in the specified date according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth\">Date.prototype.getMonth()</a>","text":"<div class=\"page-text\">The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds\">Date.prototype.getSeconds()</a>","text":"<div class=\"page-text\">The getSeconds() method returns the seconds in the specified date according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\">Date.prototype.getTime()</a>","text":"<div class=\"page-text\">The getTime() method returns the number of milliseconds* since the Unix Epoch.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\">Date.prototype.getTimezoneOffset()</a>","text":"<div class=\"page-text\">The getTimezoneOffset() method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\">Date.prototype.getUTCDate()</a>","text":"<div class=\"page-text\">The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay\">Date.prototype.getUTCDay()</a>","text":"<div class=\"page-text\">The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\">Date.prototype.getUTCFullYear()</a>","text":"<div class=\"page-text\">The getUTCFullYear() method returns the year in the specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours\">Date.prototype.getUTCHours()</a>","text":"<div class=\"page-text\">The getUTCHours() method returns the hours in the specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\">Date.prototype.getUTCMilliseconds()</a>","text":"<div class=\"page-text\">The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes\">Date.prototype.getUTCMinutes()</a>","text":"<div class=\"page-text\">The getUTCMinutes() method returns the minutes in the specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth\">Date.prototype.getUTCMonth()</a>","text":"<div class=\"page-text\">The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\">Date.prototype.getUTCSeconds()</a>","text":"<div class=\"page-text\">The getUTCSeconds() method returns the seconds in the specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear\">Date.prototype.getYear()</a>","text":"<div class=\"page-text\">The getYear() method returns the year in the specified date according to local time. Because getYear() does not return full years (\"year 2000 problem\"), it is no longer used and has been replaced by the getFullYear() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\">Date.prototype.setDate()</a>","text":"<div class=\"page-text\">The setDate() method sets the day of the Date object relative to the beginning of the currently set month.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\">Date.prototype.setFullYear()</a>","text":"<div class=\"page-text\">The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours\">Date.prototype.setHours()</a>","text":"<div class=\"page-text\">The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds\">Date.prototype.setMilliseconds()</a>","text":"<div class=\"page-text\">The setMilliseconds() method sets the milliseconds for a specified date according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes\">Date.prototype.setMinutes()</a>","text":"<div class=\"page-text\">The setMinutes() method sets the minutes for a specified date according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth\">Date.prototype.setMonth()</a>","text":"<div class=\"page-text\">The setMonth() method sets the month for a specified date according to the currently set year.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds\">Date.prototype.setSeconds()</a>","text":"<div class=\"page-text\">The setSeconds() method sets the seconds for a specified date according to local time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime\">Date.prototype.setTime()</a>","text":"<div class=\"page-text\">The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate\">Date.prototype.setUTCDate()</a>","text":"<div class=\"page-text\">The setUTCDate() method sets the day of the month for a specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear\">Date.prototype.setUTCFullYear()</a>","text":"<div class=\"page-text\">The setUTCFullYear() method sets the full year for a specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours\">Date.prototype.setUTCHours()</a>","text":"<div class=\"page-text\">The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds\">Date.prototype.setUTCMilliseconds()</a>","text":"<div class=\"page-text\">The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes\">Date.prototype.setUTCMinutes()</a>","text":"<div class=\"page-text\">The setUTCMinutes() method sets the minutes for a specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth\">Date.prototype.setUTCMonth()</a>","text":"<div class=\"page-text\">The setUTCMonth() method sets the month for a specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds\">Date.prototype.setUTCSeconds()</a>","text":"<div class=\"page-text\">The setUTCSeconds() method sets the seconds for a specified date according to universal time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear\">Date.prototype.setYear()</a>","text":"<div class=\"page-text\">The setYear() method sets the year for a specified date according to local time. Because setYear() does not set full years (\"year 2000 problem\"), it is no longer used and has been replaced by the setFullYear() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString\">Date.prototype.toDateString()</a>","text":"<div class=\"page-text\">The toDateString() method returns the date portion of a Date object in human readable form in American English.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString\">Date.prototype.toGMTString()</a>","text":"<div class=\"page-text\">The toGMTString() method converts a date to a string, using Internet Greenwich Mean Time (GMT) conventions. The exact format of the value returned by toGMTString() varies according to the platform and browser, in general it should represent a human readable date string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\">Date.prototype.toISOString()</a>","text":"<div class=\"page-text\">The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\".</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\">Date.prototype.toJSON()</a>","text":"<div class=\"page-text\">The toJSON() method returns a string representation of the Date object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\">Date.prototype.toLocaleDateString()</a>","text":"<div class=\"page-text\">The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat\">Date.prototype.toLocaleFormat()</a>","text":"<div class=\"page-text\">The non-standard toLocaleFormat() method converts a date to a string using the specified formatting. Intl.DateTimeFormat is an alternative to format dates in a standards-compliant way. See also the newer version of Date.prototype.toLocaleDateString().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\">Date.prototype.toLocaleString()</a>","text":"<div class=\"page-text\">The toLocaleString() method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\">Date.prototype.toLocaleTimeString()</a>","text":"<div class=\"page-text\">The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource\">Date.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString\">Date.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the specified Date object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\">Date.prototype.toTimeString()</a>","text":"<div class=\"page-text\">The toTimeString() method returns the time portion of a Date object in human readable form in American English.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\">Date.prototype.toUTCString()</a>","text":"<div class=\"page-text\">The toUTCString() method converts a date to a string, using the UTC time zone.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf\">Date.prototype.valueOf()</a>","text":"<div class=\"page-text\">The valueOf() method returns the primitive value of a Date object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\">Date.prototype[@@toPrimitive]</a>","text":"<div class=\"page-text\">The [@@toPrimitive]() method converts a Date object to a primitive value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a>","text":"<div class=\"page-text\">The Error constructor creates an error object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\">Error.prototype</a>","text":"<div class=\"page-text\">The Error.prototype property represents the prototype for the Error constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\">Error.prototype.columnNumber</a>","text":"<div class=\"page-text\">The columnNumber property contains the column number in the line of the file that raised this error.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\">Error.prototype.fileName</a>","text":"<div class=\"page-text\">The fileName property contains the path to the file that raised this error.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\">Error.prototype.lineNumber</a>","text":"<div class=\"page-text\">The lineNumber property contains the line number in the file that raised this error.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\">Error.prototype.message</a>","text":"<div class=\"page-text\">The message property is a human-readable description of the error.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\">Error.prototype.name</a>","text":"<div class=\"page-text\">The name property represents a name for the type of error. The initial value is \"Error\".</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack\">Error.prototype.stack</a>","text":"<div class=\"page-text\">The non-standard stack property of Error objects offer a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toSource\">Error.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns code that could eval to the same error.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString\">Error.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the specified Error object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a>","text":"<div class=\"page-text\">The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError/prototype\">EvalError.prototype</a>","text":"<div class=\"page-text\">The EvalError.prototype property represents the prototype of the EvalError constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a>","text":"<div class=\"page-text\">The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a>","text":"<div class=\"page-text\">The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a>","text":"<div class=\"page-text\">The Function constructor creates a new Function object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues to eval. However, unlike eval, the Function constructor creates functions which execute in the global scope only.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\">Function.arguments</a>","text":"<div class=\"page-text\">The function.arguments property refers to an an array-like object corresponding to the arguments passed to a function. Use the simple variable arguments instead. This property is forbidden in strict model due to tail call optimization.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity\">Function.arity</a>","text":"<div class=\"page-text\">The arity property used to return the number of arguments expected by the function, however, it no longer exists and has been replaced by the Function.prototype.length property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\">Function.caller</a>","text":"<div class=\"page-text\">The function.caller property returns the function that invoked the specified function. This property is forbidden in strict model due to tail call optimization.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\">Function.displayName</a>","text":"<div class=\"page-text\">The function.displayName property returns the display name of the function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\">Function.length</a>","text":"<div class=\"page-text\">The length property indicates the number of parameters expected by the function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\">Function.prototype</a>","text":"<div class=\"page-text\">The Function.prototype property represents the Function prototype object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">Function.prototype.apply()</a>","text":"<div class=\"page-text\">The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function.prototype.bind()</a>","text":"<div class=\"page-text\">The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">Function.prototype.call()</a>","text":"<div class=\"page-text\">The call() method calls a function with a given this value and arguments provided individually.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator\">Function.prototype.isGenerator()</a>","text":"<div class=\"page-text\">The non-standard isGenerator() method used to determine whether or not a function is a generator. It has been removed from Firefox starting with version 58.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\">Function.prototype.name</a>","text":"<div class=\"page-text\">A Function object's read-only name property indicates the function's name as specified when it was created, or \"anonymous\" for functions created anonymously.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource\">Function.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\">Function.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the source code of the function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a>","text":"<div class=\"page-text\">The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next\">Generator.prototype.next()</a>","text":"<div class=\"page-text\">The next() method returns an object with two properties done and value. You can also provide a parameter to the next method to send a value to the generator.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return\">Generator.prototype.return()</a>","text":"<div class=\"page-text\">The return() method returns the given value and finishes the generator.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw\">Generator.prototype.throw()</a>","text":"<div class=\"page-text\">The throw() method resumes the execution of a generator by throwing an error into it and returns an object with two properties done and value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>","text":"<div class=\"page-text\">The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype\">GeneratorFunction.prototype</a>","text":"<div class=\"page-text\">The GeneratorFunction.prototype property represents the GeneratorFunction prototype object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a>","text":"<div class=\"page-text\">The global Infinity property is a numeric value representing infinity.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a>","text":"<div class=\"page-text\">The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a>","text":"<div class=\"page-text\">The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a>","text":"<div class=\"page-text\">The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a>","text":"<div class=\"page-text\">The InternalError object indicates an error that occurred internally in the JavaScript engine. For example: \"InternalError: too much recursion\".</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError/prototype\">InternalError.prototype</a>","text":"<div class=\"page-text\">The InternalError.prototype property represents the prototype of the InternalError constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a>","text":"<div class=\"page-text\">The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The INTL object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales\">Intl.getCanonicalLocales()</a>","text":"<div class=\"page-text\">The Intl.getCanonicalLocales() method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\">Intl.Collator</a>","text":"<div class=\"page-text\">The Intl.Collator object is a constructor for collators, objects that enable language sensitive string comparison.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/prototype\">Intl.Collator.prototype</a>","text":"<div class=\"page-text\">The Intl.Collator.prototype property represents the prototype object for the Intl.Collator constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/compare\">Intl.Collator.prototype.compare()</a>","text":"<div class=\"page-text\">The Intl.Collator.prototype.compare() method compares two strings according to the sort order of this Collator object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/resolvedOptions\">Intl.Collator.prototype.resolvedOptions()</a>","text":"<div class=\"page-text\">The Intl.Collator.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and collation options computed during initialization of this Collator object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/supportedLocalesOf\">Intl.Collator.supportedLocalesOf()</a>","text":"<div class=\"page-text\">The Intl.Collator.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\">Intl.DateTimeFormat</a>","text":"<div class=\"page-text\">The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/prototype\">Intl.DateTimeFormat.prototype</a>","text":"<div class=\"page-text\">The Intl.DateTimeFormat.prototype property represents the prototype object for the Intl.DateTimeFormat constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\">Intl.DateTimeFormat.prototype.format()</a>","text":"<div class=\"page-text\">The Intl.DateTimeFormat.prototype.format() method formats a date according to the locale and formatting options of this Intl.DateTimeFormat object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\">Intl.DateTimeFormat.prototype.formatToParts()</a>","text":"<div class=\"page-text\">The Intl.DateTimeFormat.prototype.formatToParts() method allows locale-aware formatting of strings produced by DateTimeFormat formatters.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\">Intl.DateTimeFormat.prototype.resolvedOptions()</a>","text":"<div class=\"page-text\">The Intl.DateTimeFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/supportedLocalesOf\">Intl.DateTimeFormat.supportedLocalesOf()</a>","text":"<div class=\"page-text\">The Intl.DateTimeFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat\">Intl.ListFormat</a>","text":"<div class=\"page-text\">The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/prototype\">Intl.ListFormat.prototype</a>","text":"<div class=\"page-text\">See ListFormat for a description of Intl.ListFormat instances.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/supportedLocalesOf\">Intl.ListFormat.supportedLocalesOf()</a>","text":"<div class=\"page-text\">The Intl.ListFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/format\">Intl​.ListFormat.prototype​.format()</a>","text":"<div class=\"page-text\">No summary!</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/formatToParts\">Intl​.List​Format​.prototype​.formatToParts()</a>","text":"<div class=\"page-text\">No summary!</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat/resolvedOptions\">Intl​.List​Format​.prototype​.resolvedOptions</a>","text":"<div class=\"page-text\">No summary!</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale\">Intl.Locale</a>","text":"<div class=\"page-text\">The Intl.Locale constructor is a standard built-in property of the Intl object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale/Intl.Locale.prototype\">Intl.Locale.prototype</a>","text":"<div class=\"page-text\">No summary!</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale/prototype\">Intl.Locale.prototype</a>","text":"<div class=\"page-text\">The Intl.Locale.prototype property represents the prototype object for the Intl.Locale constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale/maximize\">Intl.Locale.prototype.maximize()</a>","text":"<div class=\"page-text\">The Intl.Locale.prototype.maximize() method executes the Add Likely Subtags algorithm against the Locale.prototype instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale/minimize\">Intl.Locale.prototype.minimize()</a>","text":"<div class=\"page-text\">The Intl.Locale.prototype.minimize() method executes the Remove Likely Subtags algorithm against the Locale.prototype instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale/toString\">Intl.Locale.prototype.toString()</a>","text":"<div class=\"page-text\">The Intl.Locale.prototype.toString() returns the Locale's data tags as a string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\">Intl.NumberFormat</a>","text":"<div class=\"page-text\">The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/prototype\">Intl.NumberFormat.prototype</a>","text":"<div class=\"page-text\">The Intl.NumberFormat.prototype property represents the prototype object for the Intl.NumberFormat constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/format\">Intl.NumberFormat.prototype.format()</a>","text":"<div class=\"page-text\">The Intl.NumberFormat.prototype.format() method formats a number according to the locale and formatting options of this NumberFormat object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/formatToParts\">Intl.NumberFormat.prototype.formatToParts()</a>","text":"<div class=\"page-text\">The Intl.Numberformat.prototype.formatToParts() method allows locale-aware formatting of strings produced by NumberTimeFormat formatters.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/resolvedOptions\">Intl.NumberFormat.prototype.resolvedOptions()</a>","text":"<div class=\"page-text\">The Intl.NumberFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and number formatting options computed during initialization of this NumberFormat object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/supportedLocalesOf\">Intl.NumberFormat.supportedLocalesOf()</a>","text":"<div class=\"page-text\">The Intl.NumberFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules\">Intl.PluralRules</a>","text":"<div class=\"page-text\">The Intl.PluralRules object is a constructor for objects that enable plural sensitive formatting and plural language rules.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules/prototype\">Intl.PluralRules.prototype</a>","text":"<div class=\"page-text\">The Intl.PluralRules.prototype property represents the prototype object for the Intl.PluralRules constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules/resolvedOptions\">Intl.PluralRules.prototype.resolvedOptions()</a>","text":"<div class=\"page-text\">The Intl.PluralRules.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this PluralRules object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules/select\">Intl.PluralRules.select()</a>","text":"<div class=\"page-text\">The Intl.PluralRules.prototype.select method returns a String indicating which plural rule to use for locale-aware formatting.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules/supportedLocalesOf\">Intl.PluralRules.supportedLocalesOf()</a>","text":"<div class=\"page-text\">The Intl.PluralRules.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in plural formatting without having to fall back to the runtime's default locale.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat\">Intl.RelativeTimeFormat</a>","text":"<div class=\"page-text\">The Intl.RelativeTimeFormat object is a constructor for objects that enable language-sensitive relative time formatting.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/prototype\">Intl.RelativeTimeFormat.prototype</a>","text":"<div class=\"page-text\">The Intl.RelativeTimeFormat.prototype property represents the prototype object for the Intl.RelativeTimeFormat constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/format\">Intl.RelativeTimeFormat.prototype.format()</a>","text":"<div class=\"page-text\">The Intl.RelativeTimeFormat.prototype.format() method formats a value and unit according to the locale and formatting options of this RelativeTimeFormat object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/formatToParts\">Intl.RelativeTimeFormat.prototype.formatToParts()</a>","text":"<div class=\"page-text\">The Intl.RelativeTimeFormat.prototype.formatToParts() method returns an Array of objects representing the relative time format in parts that can be used for custom locale-aware formatting.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/resolvedOptions\">Intl.RelativeTimeFormat.prototype.resolvedOptions()</a>","text":"<div class=\"page-text\">The Intl.RelativeTimeFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this RelativeTimeFormat object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat/supportedLocalesOf\">Intl.RelativeTimeFormat.supportedLocalesOf()</a>","text":"<div class=\"page-text\">The Intl.RelativeTimeFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a>","text":"<div class=\"page-text\">The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">JSON.parse()</a>","text":"<div class=\"page-text\">The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify()</a>","text":"<div class=\"page-text\">The JSON.stringify() method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a>","text":"<div class=\"page-text\">The Map object holds key-value pairs and remembers the original insertion order of the keys.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype\">Map.prototype</a>","text":"<div class=\"page-text\">The Map.prototype property represents the prototype for the Map constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\">Map.prototype.clear()</a>","text":"<div class=\"page-text\">The clear() method removes all elements from a Map object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\">Map.prototype.delete()</a>","text":"<div class=\"page-text\">The delete() method removes the specified element from a Map object by key.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\">Map.prototype.entries()</a>","text":"<div class=\"page-text\">The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\">Map.prototype.forEach()</a>","text":"<div class=\"page-text\">The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\">Map.prototype.get()</a>","text":"<div class=\"page-text\">The get() method returns a specified element from a Map object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\">Map.prototype.has()</a>","text":"<div class=\"page-text\">The has() method returns a boolean indicating whether an element with the specified key exists or not.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\">Map.prototype.keys()</a>","text":"<div class=\"page-text\">The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\">Map.prototype.set()</a>","text":"<div class=\"page-text\">The set() method adds or updates an element with a specified key and a value to a Map object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\">Map.prototype.size</a>","text":"<div class=\"page-text\">The size accessor property returns the number of elements in a Map object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\">Map.prototype.values()</a>","text":"<div class=\"page-text\">The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\">Map.prototype[@@iterator]()</a>","text":"<div class=\"page-text\">The initial value of the @@iterator property is the same function object as the initial value of the entries method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@toStringTag\">Map.prototype[@@toStringTag]</a>","text":"<div class=\"page-text\">The Map[@@toStringTag] property has an initial value of \"Map\".</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\">get Map[@@species]</a>","text":"<div class=\"page-text\">The Map[@@species] accessor property returns the Map constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a>","text":"<div class=\"page-text\">Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\">Math.E</a>","text":"<div class=\"page-text\">The Math.E property represents the base of natural logarithms, e, approximately 2.718.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10\">Math.LN10</a>","text":"<div class=\"page-text\">The Math.LN10 property represents the natural logarithm of 10, approximately 2.302:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2\">Math.LN2</a>","text":"<div class=\"page-text\">The Math.LN2 property represents the natural logarithm of 2, approximately 0.693:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E\">Math.LOG10E</a>","text":"<div class=\"page-text\">The Math.LOG10E property represents the base 10 logarithm of e, approximately 0.434:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E\">Math.LOG2E</a>","text":"<div class=\"page-text\">The Math.LOG2E property represents the base 2 logarithm of e, approximately 1.442:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\">Math.PI</a>","text":"<div class=\"page-text\">The Math.PI property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\">Math.SQRT1_2</a>","text":"<div class=\"page-text\">The Math.SQRT1_2 property represents the square root of 1/2 which is approximately 0.707:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2\">Math.SQRT2</a>","text":"<div class=\"page-text\">The Math.SQRT2 property represents the square root of 2, approximately 1.414:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\">Math.abs()</a>","text":"<div class=\"page-text\">The Math.abs() function returns the absolute value of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\">Math.acos()</a>","text":"<div class=\"page-text\">The Math.acos() function returns the arccosine (in radians) of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\">Math.acosh()</a>","text":"<div class=\"page-text\">The Math.acosh() function returns the hyperbolic arc-cosine of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\">Math.asin()</a>","text":"<div class=\"page-text\">The Math.asin() function returns the arcsine (in radians) of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\">Math.asinh()</a>","text":"<div class=\"page-text\">The Math.asinh() function returns the hyperbolic arcsine of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\">Math.atan()</a>","text":"<div class=\"page-text\">The Math.atan() function returns the arctangent (in radians) of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\">Math.atan2()</a>","text":"<div class=\"page-text\">The Math.atan2() function returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for Math.atan2(y,x).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\">Math.atanh()</a>","text":"<div class=\"page-text\">The Math.atanh() function returns the hyperbolic arctangent of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\">Math.cbrt()</a>","text":"<div class=\"page-text\">The Math.cbrt() function returns the cube root of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\">Math.ceil()</a>","text":"<div class=\"page-text\">The Math.ceil() function returns the smallest integer greater than or equal to a given number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\">Math.clz32()</a>","text":"<div class=\"page-text\">The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\">Math.cos()</a>","text":"<div class=\"page-text\">The Math.cos() static function returns the cosine of the specified angle, which must be specified in radians. This value is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\">Math.cosh()</a>","text":"<div class=\"page-text\">The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\">Math.exp()</a>","text":"<div class=\"page-text\">The Math.exp() function returns ex, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\">Math.expm1()</a>","text":"<div class=\"page-text\">The Math.expm1() function returns ex - 1, where x is the argument, and e the base of the natural logarithms.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\">Math.floor()</a>","text":"<div class=\"page-text\">The Math.floor() function returns the largest integer less than or equal to a given number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\">Math.fround()</a>","text":"<div class=\"page-text\">The Math.fround() function returns the nearest 32-bit single precision float representation of a Number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\">Math.hypot()</a>","text":"<div class=\"page-text\">The Math.hypot() function returns the square root of the sum of squares of its arguments, that is:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\">Math.imul()</a>","text":"<div class=\"page-text\">The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log\">Math.log()</a>","text":"<div class=\"page-text\">The Math.log() function returns the natural logarithm (base e) of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\">Math.log10()</a>","text":"<div class=\"page-text\">The Math.log10() function returns the base 10 logarithm of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\">Math.log1p()</a>","text":"<div class=\"page-text\">The Math.log1p() function returns the natural logarithm (base e) of 1 + a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\">Math.log2()</a>","text":"<div class=\"page-text\">The Math.log2() function returns the base 2 logarithm of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max\">Math.max()</a>","text":"<div class=\"page-text\">The Math.max() function returns the largest of zero or more numbers.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min\">Math.min()</a>","text":"<div class=\"page-text\">The static function Math.min() returns the lowest-valued number passed into it, or NaN if any parameter isn't a number and can't be converted into one.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\">Math.pow()</a>","text":"<div class=\"page-text\">The Math.pow() function returns the base to the exponent power, that is, baseexponent.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\">Math.random()</a>","text":"<div class=\"page-text\">The Math.random() function returns a floating-point, pseudo-random number in the range [0, 1) (inclusive of 0, but not 1) with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\">Math.round()</a>","text":"<div class=\"page-text\">The Math.round() function returns the value of a number rounded to the nearest integer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\">Math.sign()</a>","text":"<div class=\"page-text\">The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\">Math.sin()</a>","text":"<div class=\"page-text\">The Math.sin() function returns the sine of a number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\">Math.sinh()</a>","text":"<div class=\"page-text\">The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\">Math.sqrt()</a>","text":"<div class=\"page-text\">The Math.sqrt() function returns the square root of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\">Math.tan()</a>","text":"<div class=\"page-text\">The Math.tan() function returns the tangent of a number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\">Math.tanh()</a>","text":"<div class=\"page-text\">The Math.tanh() function returns the hyperbolic tangent of a number, that is</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\">Math.trunc()</a>","text":"<div class=\"page-text\">The Math.trunc() function returns the integer part of a number by removing any fractional digits.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a>","text":"<div class=\"page-text\">The global NaN property is a value representing Not-A-Number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a>","text":"<div class=\"page-text\">The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor. A primitive type object number is created using the Number() function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\">Number.EPSILON</a>","text":"<div class=\"page-text\">The Number.EPSILON property represents the difference between 1 and the smallest floating point number greater than 1.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">Number.MAX_SAFE_INTEGER</a>","text":"<div class=\"page-text\">The Number.MAX_SAFE_INTEGER constant represents the maximum safe integer in JavaScript (253 - 1).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\">Number.MAX_VALUE</a>","text":"<div class=\"page-text\">The Number.MAX_VALUE property represents the maximum numeric value representable in JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\">Number.MIN_SAFE_INTEGER</a>","text":"<div class=\"page-text\">The Number.MIN_SAFE_INTEGER constant represents the minimum safe integer in JavaScript (-(253 - 1)).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\">Number.MIN_VALUE</a>","text":"<div class=\"page-text\">The Number.MIN_VALUE property represents the smallest positive numeric value representable in JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\">Number.NEGATIVE_INFINITY</a>","text":"<div class=\"page-text\">The Number.NEGATIVE_INFINITY property represents the negative Infinity value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\">Number.NaN</a>","text":"<div class=\"page-text\">The Number.NaN property represents Not-A-Number. Equivalent of NaN.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\">Number.POSITIVE_INFINITY</a>","text":"<div class=\"page-text\">The Number.POSITIVE_INFINITY property represents the positive Infinity value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\">Number.isFinite()</a>","text":"<div class=\"page-text\">The Number.isFinite() method determines whether the passed value is a finite number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\">Number.isInteger()</a>","text":"<div class=\"page-text\">The Number.isInteger() method determines whether the passed value is an integer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\">Number.isNaN()</a>","text":"<div class=\"page-text\">The Number.isNaN() method determines whether the passed value is NaN and its type is Number. It is a more robust version of the original, global isNaN().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\">Number.isSafeInteger()</a>","text":"<div class=\"page-text\">The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\">Number.parseFloat()</a>","text":"<div class=\"page-text\">The Number.parseFloat() method parses a string argument and returns a floating point number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\">Number.parseInt()</a>","text":"<div class=\"page-text\">The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/prototype\">Number.prototype</a>","text":"<div class=\"page-text\">The Number.prototype property represents the prototype for the Number constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\">Number.prototype.toExponential()</a>","text":"<div class=\"page-text\">The toExponential() method returns a string representing the Number object in exponential notation.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\">Number.prototype.toFixed()</a>","text":"<div class=\"page-text\">The toFixed() method formats a number using fixed-point notation.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\">Number.prototype.toLocaleString()</a>","text":"<div class=\"page-text\">The toLocaleString() method returns a string with a language-sensitive representation of this number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\">Number.prototype.toPrecision()</a>","text":"<div class=\"page-text\">The toPrecision() method returns a string representing the Number object to the specified precision.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource\">Number.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\">Number.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the specified Number object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf\">Number.prototype.valueOf()</a>","text":"<div class=\"page-text\">The valueOf() method returns the wrapped primitive value of a Number object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger\">Number.toInteger()</a>","text":"<div class=\"page-text\">The Number.toInteger() method used to evaluate the passed value and convert it to an integer, but its implementation has been removed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a>","text":"<div class=\"page-text\">The Object constructor creates an object wrapper.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign()</a>","text":"<div class=\"page-text\">The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a>","text":"<div class=\"page-text\">The Object.create() method creates a new object, using an existing object as the prototype of the newly created object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\">Object.defineProperties()</a>","text":"<div class=\"page-text\">The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a>","text":"<div class=\"page-text\">The static method Object.defineProperty() defines a new property directly on an object, or modifies an existing property on an object, and returns the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples\">Additional examples for Object.defineProperty</a>","text":"<div class=\"page-text\">This page provides additional examples for Object.defineProperty().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\">Object.entries()</a>","text":"<div class=\"page-text\">The Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well). The order of the array returned by Object.entries() does not depend on how an object is defined. If there is a need for certain ordering then the array should be sorted first like Object.entries(obj).sort((a, b) => b[0].localeCompare(a[0]));.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze()</a>","text":"<div class=\"page-text\">The Object.freeze() method freezes an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. freeze() returns the same object that was passed in.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\">Object.fromEntries()</a>","text":"<div class=\"page-text\">The Object.fromEntries() method transforms a list of key-value pairs into an object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getNotifier\">Object.getNotifier()</a>","text":"<div class=\"page-text\">The Object.getNotifer() method was used to create an object that allows to synthetically trigger a change, but has been deprecated and removed in browsers.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\">Object.getOwnPropertyDescriptor()</a>","text":"<div class=\"page-text\">The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\">Object.getOwnPropertyDescriptors()</a>","text":"<div class=\"page-text\">The Object.getOwnPropertyDescriptors() method returns all own property descriptors of a given object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\">Object.getOwnPropertyNames()</a>","text":"<div class=\"page-text\">The Object.getOwnPropertyNames() method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\">Object.getOwnPropertySymbols()</a>","text":"<div class=\"page-text\">The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\">Object.getPrototypeOf()</a>","text":"<div class=\"page-text\">The Object.getPrototypeOf() method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">Object.is()</a>","text":"<div class=\"page-text\">The Object.is() method determines whether two values are the same value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\">Object.isExtensible()</a>","text":"<div class=\"page-text\">The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\">Object.isFrozen()</a>","text":"<div class=\"page-text\">The Object.isFrozen() determines if an object is frozen.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\">Object.isSealed()</a>","text":"<div class=\"page-text\">The Object.isSealed() method determines if an object is sealed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\">Object.keys()</a>","text":"<div class=\"page-text\">The Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\">Object.observe()</a>","text":"<div class=\"page-text\">The Object.observe() method was used for asynchronously observing the changes to an object. It provided a stream of changes in the order in which they occur. However, this API has been deprecated and removed from browsers. You can use the more general Proxy object instead.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\">Object.preventExtensions()</a>","text":"<div class=\"page-text\">The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">Object.prototype</a>","text":"<div class=\"page-text\">The Object.prototype is a property of the Object constructor. And it is also the end of a prototype chain.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count\">Object.prototype.__count__</a>","text":"<div class=\"page-text\">The __count__ property used to store the count of enumerable properties on the object, but it has been removed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\">Object.prototype.__defineGetter__()</a>","text":"<div class=\"page-text\">The __defineGetter__ method binds an object's property to a function to be called when that property is looked up.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\">Object.prototype.__defineSetter__()</a>","text":"<div class=\"page-text\">The __defineSetter__ method binds an object's property to a function to be called when an attempt is made to set that property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\">Object.prototype.__lookupGetter__()</a>","text":"<div class=\"page-text\">The __lookupGetter__ method returns the function bound as a getter to the specified property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\">Object.prototype.__lookupSetter__()</a>","text":"<div class=\"page-text\">The __lookupSetter__ method returns the function bound as a setter to the specified property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod\">Object.prototype.__noSuchMethod__</a>","text":"<div class=\"page-text\">The __noSuchMethod__ property used to reference a function to be executed when a non-existent method is called on an object, but this function is no longer available.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\">Object.prototype.__parent__</a>","text":"<div class=\"page-text\">The __parent__ property used to point to an object's context, but it has been removed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\">Object.prototype.__proto__</a>","text":"<div class=\"page-text\">The __proto__ property of Object.prototype is an accessor property (a getter function and a setter function) that exposes the internal [[Prototype]] (either an object or null) of the object through which it is accessed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\">Object.prototype.constructor</a>","text":"<div class=\"page-text\">The constructor property returns a reference to the Object constructor function that created the instance object. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and \"test\".</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval\">Object.prototype.eval()</a>","text":"<div class=\"page-text\">The Object.eval() method used to evaluate a string of JavaScript code in the context of an object, however, this method has been removed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\">Object.prototype.hasOwnProperty()</a>","text":"<div class=\"page-text\">The hasOwnProperty() method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\">Object.prototype.isPrototypeOf()</a>","text":"<div class=\"page-text\">The isPrototypeOf() method checks if an object exists in another object's prototype chain.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\">Object.prototype.propertyIsEnumerable()</a>","text":"<div class=\"page-text\">The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\">Object.prototype.toLocaleString()</a>","text":"<div class=\"page-text\">The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\">Object.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">Object.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch\">Object.prototype.unwatch()</a>","text":"<div class=\"page-text\">The unwatch() method removes a watchpoint set with the watch() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\">Object.prototype.valueOf()</a>","text":"<div class=\"page-text\">The valueOf() method returns the primitive value of the specified object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\">Object.prototype.watch()</a>","text":"<div class=\"page-text\">The watch() method watches for a property to be assigned a value and runs a function when that occurs.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\">Object.seal()</a>","text":"<div class=\"page-text\">The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\">Object.setPrototypeOf()</a>","text":"<div class=\"page-text\">The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unobserve\">Object.unobserve()</a>","text":"<div class=\"page-text\">The Object.unobserve() method was used to remove observers set by Object.observe(), but has been deprecated and removed from Browsers. You can use the more general Proxy object instead.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\">Object.values()</a>","text":"<div class=\"page-text\">The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>","text":"<div class=\"page-text\">The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">Promise.all()</a>","text":"<div class=\"page-text\">The Promise.all() method returns a single Promise that resolves when all of the promises passed as an iterable have resolved or when the iterable contains no promises. It rejects with the reason of the first promise that rejects.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/prototype\">Promise.prototype</a>","text":"<div class=\"page-text\">The Promise.prototype property represents the prototype for the Promise constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\">Promise.prototype.catch()</a>","text":"<div class=\"page-text\">The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected) (in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)). This means that you have to provide onRejected function even if you want to fallback to undefined result value - for example obj.catch(() => {}).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\">Promise.prototype.finally()</a>","text":"<div class=\"page-text\">The finally() method returns a Promise. When the promise is settled, i.e either fulfilled or rejected, the specified callback function is executed. This provides a way for code to be run whether the promise was fulfilled successfully or rejected once the Promise has been dealt with.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">Promise.prototype.then()</a>","text":"<div class=\"page-text\">The then() method returns a Promise. It takes up to two arguments: callback functions for the success and failure cases of the Promise.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\">Promise.race()</a>","text":"<div class=\"page-text\">The Promise.race() method returns a promise that resolves or rejects as soon as one of the promises in an iterable resolves or rejects, with the value or reason from that promise.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\">Promise.reject()</a>","text":"<div class=\"page-text\">The Promise.reject() method returns a Promise object that is rejected with a given reason.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\">Promise.resolve()</a>","text":"<div class=\"page-text\">The Promise.resolve() method returns a Promise object that is resolved with a given value. If the value is a promise, that promise is returned; if the value is a thenable (i.e. has a \"then\" method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value. This function flattens nested layers of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a>","text":"<div class=\"page-text\">The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler\">Proxy handler</a>","text":"<div class=\"page-text\">The proxy's handler object is a placeholder object which contains traps for proxies.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/apply\">handler.apply()</a>","text":"<div class=\"page-text\">The handler.apply() method is a trap for a function call.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/construct\">handler.construct()</a>","text":"<div class=\"page-text\">The handler.construct() method is a trap for the new operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself have a [[Construct]] internal method (i.e. new target must be valid).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/defineProperty\">handler.defineProperty()</a>","text":"<div class=\"page-text\">The handler.defineProperty() method is a trap for Object.defineProperty().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/deleteProperty\">handler.deleteProperty()</a>","text":"<div class=\"page-text\">The handler.deleteProperty() method is a trap for the delete operator.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/enumerate\">handler.enumerate()</a>","text":"<div class=\"page-text\">The handler.enumerate() method used to be a trap for for...in statements, but has been removed from the ECMAScript standard in ES2016 and is deprecated in browsers.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get\">handler.get()</a>","text":"<div class=\"page-text\">The handler.get() method is a trap for getting a property value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor\">handler.getOwnPropertyDescriptor()</a>","text":"<div class=\"page-text\">The handler.getOwnPropertyDescriptor() method is a trap for Object.getOwnPropertyDescriptor().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getPrototypeOf\">handler.getPrototypeOf()</a>","text":"<div class=\"page-text\">The handler.getPrototypeOf() method is a trap for the [[GetPrototypeOf]] internal method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/has\">handler.has()</a>","text":"<div class=\"page-text\">The handler.has() method is a trap for the in operator.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/isExtensible\">handler.isExtensible()</a>","text":"<div class=\"page-text\">The handler.isExtensible() method is a trap for Object.isExtensible().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/ownKeys\">handler.ownKeys()</a>","text":"<div class=\"page-text\">The handler.ownKeys() method is a trap for Reflect.ownKeys().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/preventExtensions\">handler.preventExtensions()</a>","text":"<div class=\"page-text\">The handler.preventExtensions() method is a trap for Object.preventExtensions().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set\">handler.set()</a>","text":"<div class=\"page-text\">The handler.set() method is a trap for setting a property value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/setPrototypeOf\">handler.setPrototypeOf()</a>","text":"<div class=\"page-text\">The handler.setPrototypeOf() method is a trap for Object.setPrototypeOf().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable\">Proxy.revocable()</a>","text":"<div class=\"page-text\">The Proxy.revocable() method is used to create a revocable Proxy object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a>","text":"<div class=\"page-text\">The RangeError object indicates an error when a value is not in the set or range of allowed values.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError/prototype\">RangeError.prototype</a>","text":"<div class=\"page-text\">The RangeError.prototype property represents the prototype the RangeError constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a>","text":"<div class=\"page-text\">The ReferenceError object represents an error when a non-existent variable is referenced.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/prototype\">ReferenceError.prototype</a>","text":"<div class=\"page-text\">The ReferenceError.prototype property represents the prototype for the ReferenceError constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a>","text":"<div class=\"page-text\">Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it's not constructible.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/Comparing_Reflect_and_Object_methods\">Comparing Reflect and Object methods</a>","text":"<div class=\"page-text\">The Reflect object, introduced in ES2015, is a built-in object that provides methods to interface with JavaScript objects. Some of the static functions that exist on Reflect also correspond to methods available on Object, which predates ES2015. Although some of the methods appear to be similar in their behavior, there are often subtle differences between them.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply\">Reflect.apply()</a>","text":"<div class=\"page-text\">The static Reflect.apply() method calls a target function with arguments as specified.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\">Reflect.construct()</a>","text":"<div class=\"page-text\">The static Reflect.construct() method acts like the new operator, but as a function. It is equivalent to calling new target(...args). It gives also the added option to specify a different prototype.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty\">Reflect.defineProperty()</a>","text":"<div class=\"page-text\">The static Reflect.defineProperty() method is like Object.defineProperty() but returns a Boolean.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty\">Reflect.deleteProperty()</a>","text":"<div class=\"page-text\">The static Reflect.deleteProperty() method allows to delete properties. It is like the delete operator as a function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/enumerate\">Reflect.enumerate()</a>","text":"<div class=\"page-text\">The static Reflect.enumerate() method used to return an iterator with the enumerable own and inherited properties of the target object, but has been removed in ECMAScript 2016 and is deprecated in browsers.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get\">Reflect.get()</a>","text":"<div class=\"page-text\">The static Reflect.get() method works like getting a property from an object (target[propertyKey]) as a function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor\">Reflect.getOwnPropertyDescriptor()</a>","text":"<div class=\"page-text\">The static Reflect.getOwnPropertyDescriptor() method is similar to Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\">Reflect.getPrototypeOf()</a>","text":"<div class=\"page-text\">The static Reflect.getPrototypeOf() method is almost the same method as Object.getPrototypeOf(). It returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has\">Reflect.has()</a>","text":"<div class=\"page-text\">The static Reflect.has() method works like the in operator as a function.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible\">Reflect.isExtensible()</a>","text":"<div class=\"page-text\">The static Reflect.isExtensible() method determines if an object is extensible (whether it can have new properties added to it). It is similar to Object.isExtensible(), but with some differences.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\">Reflect.ownKeys()</a>","text":"<div class=\"page-text\">The static Reflect.ownKeys() method returns an array of the target object's own property keys.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions\">Reflect.preventExtensions()</a>","text":"<div class=\"page-text\">The static Reflect.preventExtensions() method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object). It is similar to Object.preventExtensions(), but with some differences.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set\">Reflect.set()</a>","text":"<div class=\"page-text\">The static Reflect.set() method works like setting a property on an object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\">Reflect.setPrototypeOf()</a>","text":"<div class=\"page-text\">The static Reflect.setPrototypeOf() method is the same method as Object.setPrototypeOf(). It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or to null.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a>","text":"<div class=\"page-text\">The RegExp constructor creates a regular expression object for matching text with a pattern.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n\">RegExp.$1-$9</a>","text":"<div class=\"page-text\">The non-standard $1, $2, $3, $4, $5, $6, $7, $8, $9 properties are static and read-only properties of regular expressions that contain parenthesized substring matches.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input\">RegExp.input ($_)</a>","text":"<div class=\"page-text\">The non-standard input property is a static property of regular expressions that contains the string against which a regular expression is matched. RegExp.$_ is an alias for this property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\">RegExp.lastMatch ($&)</a>","text":"<div class=\"page-text\">The non-standard lastMatch property is a static and read-only property of regular expressions that contains the last matched characters. RegExp.$& is an alias for this property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen\">RegExp.lastParen ($+)</a>","text":"<div class=\"page-text\">The non-standard lastParen property is a static and read-only property of regular expressions that contains the last parenthesized substring match, if any. RegExp.$+ is an alias for this property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext\">RegExp.leftContext ($`)</a>","text":"<div class=\"page-text\">The non-standard leftContext property is a static and read-only property of regular expressions that contains the substring preceding the most recent match. RegExp.$` is an alias for this property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype\">RegExp.prototype</a>","text":"<div class=\"page-text\">The RegExp.prototype property represents the prototype object for the RegExp constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile\">RegExp.prototype.compile()</a>","text":"<div class=\"page-text\">The deprecated compile() method is used to (re-)compile a regular expression during execution of a script. It is basically the same as the RegExp constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\">RegExp.prototype.dotAll</a>","text":"<div class=\"page-text\">The dotAll property indicates whether or not the \"s\" flag is used with the regular expression. dotAll is a read-only property of an individual regular expression instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\">RegExp.prototype.exec()</a>","text":"<div class=\"page-text\">The exec() method executes a search for a match in a specified string. Returns a result array, or null.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\">RegExp.prototype.flags</a>","text":"<div class=\"page-text\">The flags property returns a string consisting of the flags of the current regular expression object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\">RegExp.prototype.global</a>","text":"<div class=\"page-text\">The global property indicates whether or not the \"g\" flag is used with the regular expression. global is a read-only property of an individual regular expression instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\">RegExp.prototype.ignoreCase</a>","text":"<div class=\"page-text\">The ignoreCase property indicates whether or not the \"i\" flag is used with the regular expression. ignoreCase is a read-only property of an individual regular expression instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\">RegExp.prototype.multiline</a>","text":"<div class=\"page-text\">The multiline property indicates whether or not the \"m\" flag is used with the regular expression. multiline is a read-only property of an individual regular expression instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\">RegExp.prototype.source</a>","text":"<div class=\"page-text\">The source property returns a String containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\">RegExp.prototype.sticky</a>","text":"<div class=\"page-text\">The sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression). sticky is a read-only property of an individual regular expression object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\">RegExp.prototype.test()</a>","text":"<div class=\"page-text\">The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toSource\">RegExp.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\">RegExp.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the regular expression.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\">RegExp.prototype.unicode</a>","text":"<div class=\"page-text\">The unicode property indicates whether or not the \"u\" flag is used with a regular expression. unicode is a read-only property of an individual regular expression instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\">RegExp.prototype[@@matchAll]()</a>","text":"<div class=\"page-text\">The [@@matchAll] method returns all matches of the regular expression against a string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\">RegExp.prototype[@@match]()</a>","text":"<div class=\"page-text\">The [@@match]() method retrieves the matches when matching a string against a regular expression.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\">RegExp.prototype[@@replace]()</a>","text":"<div class=\"page-text\">The [@@replace]() method replaces some or all matches of a this pattern in a string by a replacement, and returns the result of the replacement as a new string. The replacement can be a string or a function to be called for each match.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\">RegExp.prototype[@@search]()</a>","text":"<div class=\"page-text\">The [@@search]() method executes a search for a match between a this regular expression and a string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\">RegExp.prototype[@@split]()</a>","text":"<div class=\"page-text\">The [@@split]() method splits a String object into an array of strings by separating the string into substrings.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext\">RegExp.rightContext ($')</a>","text":"<div class=\"page-text\">The non-standard rightContext property is a static and read-only property of regular expressions that contains the substring following the most recent match. RegExp.$' is an alias for this property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species\">get RegExp[@@species]</a>","text":"<div class=\"page-text\">The RegExp[@@species] accessor property returns the RegExp constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\">regexp.lastIndex</a>","text":"<div class=\"page-text\">The lastIndex is a read/write integer property of regular expression instances that specifies the index at which to start the next match.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a>","text":"<div class=\"page-text\">The Set object lets you store unique values of any type, whether primitive values or object references.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/prototype\">Set.prototype</a>","text":"<div class=\"page-text\">The Set.prototype property represents the prototype for the Set constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\">Set.prototype.add()</a>","text":"<div class=\"page-text\">The add() method appends a new element with a specified value to the end of a Set object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\">Set.prototype.clear()</a>","text":"<div class=\"page-text\">The clear() method removes all elements from a Set object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\">Set.prototype.delete()</a>","text":"<div class=\"page-text\">The delete() method removes the specified element from a Set object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\">Set.prototype.entries()</a>","text":"<div class=\"page-text\">The entries() method returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\">Set.prototype.forEach()</a>","text":"<div class=\"page-text\">The forEach() method executes a provided function once for each value in the Set object, in insertion order.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\">Set.prototype.has()</a>","text":"<div class=\"page-text\">The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size\">Set.prototype.size</a>","text":"<div class=\"page-text\">The size accessor property returns the number of elements in a Set object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\">Set.prototype.values()</a>","text":"<div class=\"page-text\">The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator\">Set.prototype[@@iterator]()</a>","text":"<div class=\"page-text\">The initial value of the @@iterator property is the same function object as the initial value of the values property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species\">get Set[@@species]</a>","text":"<div class=\"page-text\">The Set[@@species] accessor property returns the Set constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a>","text":"<div class=\"page-text\">The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/prototype\">SharedArrayBuffer.prototype</a>","text":"<div class=\"page-text\">The SharedArrayBuffer.prototype property represents the prototype for the SharedArrayBuffer object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength\">SharedArrayBuffer.prototype.byteLength</a>","text":"<div class=\"page-text\">The byteLength accessor property represents the length of an SharedArrayBuffer in bytes.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice\">SharedArrayBuffer.prototype.slice()</a>","text":"<div class=\"page-text\">The SharedArrayBuffer.prototype.slice() method returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning. This method has the same algorithm as Array.prototype.slice().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a>","text":"<div class=\"page-text\">The String global object is a constructor for strings or a sequence of characters.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\">String.fromCharCode()</a>","text":"<div class=\"page-text\">The static String.fromCharCode() method returns a string created from the specified sequence of UTF-16 code units.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\">String.fromCodePoint()</a>","text":"<div class=\"page-text\">The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype\">String.prototype</a>","text":"<div class=\"page-text\">The String.prototype property represents the String prototype object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\">String.prototype.anchor()</a>","text":"<div class=\"page-text\">The anchor() method creates an <a> HTML anchor element that is used as a hypertext target.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\">String.prototype.big()</a>","text":"<div class=\"page-text\">The big() method creates a <big> HTML element that causes a string to be displayed in a big font.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\">String.prototype.blink()</a>","text":"<div class=\"page-text\">The blink() method creates a <blink> HTML element that causes a string to blink.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\">String.prototype.bold()</a>","text":"<div class=\"page-text\">The bold() method creates a <b> HTML element that causes a string to be displayed as bold.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\">String.prototype.charAt()</a>","text":"<div class=\"page-text\">The String object's charAt() method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\">String.prototype.charCodeAt()</a>","text":"<div class=\"page-text\">The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\">String.prototype.codePointAt()</a>","text":"<div class=\"page-text\">The codePointAt() method returns a non-negative integer that is the Unicode code point value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat\">String.prototype.concat()</a>","text":"<div class=\"page-text\">The concat() method concatenates the string arguments to the calling string and returns a new string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\">String.prototype.endsWith()</a>","text":"<div class=\"page-text\">The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed\">String.prototype.fixed()</a>","text":"<div class=\"page-text\">The fixed() method creates a <tt> HTML element that causes a string to be displayed in fixed-pitch font.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\">String.prototype.fontcolor()</a>","text":"<div class=\"page-text\">The fontcolor() method creates a <font> HTML element that causes a string to be displayed in the specified font color.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\">String.prototype.fontsize()</a>","text":"<div class=\"page-text\">The fontsize() method creates a <font> HTML element that causes a string to be displayed in the specified font size.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\">String.prototype.includes()</a>","text":"<div class=\"page-text\">The includes() method determines whether one string may be found within another string, returning true or false as appropriate.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\">String.prototype.indexOf()</a>","text":"<div class=\"page-text\">The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\">String.prototype.italics()</a>","text":"<div class=\"page-text\">The italics() method creates an <i> HTML element that causes a string to be italic.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\">String.prototype.lastIndexOf()</a>","text":"<div class=\"page-text\">The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link\">String.prototype.link()</a>","text":"<div class=\"page-text\">The link() method creates a string representing the code for an <a> HTML element to be used as a hypertext link to another URL.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\">String.prototype.localeCompare()</a>","text":"<div class=\"page-text\">The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\">String.prototype.match()</a>","text":"<div class=\"page-text\">The match() method retrieves the result of matching a string against a regular expression.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\">String.prototype.matchAll()</a>","text":"<div class=\"page-text\">The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\">String.prototype.normalize()</a>","text":"<div class=\"page-text\">The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\">String.prototype.padEnd()</a>","text":"<div class=\"page-text\">The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\">String.prototype.padStart()</a>","text":"<div class=\"page-text\">The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote\">String.prototype.quote()</a>","text":"<div class=\"page-text\">The non-standard quote() method returns a copy of the string, replacing various special characters in the string with their escape sequences and wrapping the result in double-quotes (\").</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\">String.prototype.repeat()</a>","text":"<div class=\"page-text\">The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">String.prototype.replace()</a>","text":"<div class=\"page-text\">The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\">String.prototype.search()</a>","text":"<div class=\"page-text\">The search() method executes a search for a match between a regular expression and this String object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">String.prototype.slice()</a>","text":"<div class=\"page-text\">The slice() method extracts a section of a string and returns it as a new string, without modifying the original string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small\">String.prototype.small()</a>","text":"<div class=\"page-text\">The small() method creates a <small> HTML element that causes a string to be displayed in a small font.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\">String.prototype.split()</a>","text":"<div class=\"page-text\">The split() method splits a String object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\">String.prototype.startsWith()</a>","text":"<div class=\"page-text\">The startsWith() method determines whether a string begins with the characters of a specified string, returning true or false as appropriate.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\">String.prototype.strike()</a>","text":"<div class=\"page-text\">The strike() method creates a <strike> HTML element that causes a string to be displayed as struck-out text.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub\">String.prototype.sub()</a>","text":"<div class=\"page-text\">The sub() method creates a <sub> HTML element that causes a string to be displayed as subscript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\">String.prototype.substr()</a>","text":"<div class=\"page-text\">The substr() method returns a portion of the string, starting at the specified index and extending for a given number of characters afterward.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\">String.prototype.substring()</a>","text":"<div class=\"page-text\">The substring() method returns the part of the string between the start and end indexes, or to the end of the string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup\">String.prototype.sup()</a>","text":"<div class=\"page-text\">The sup() method creates a <sup> HTML element that causes a string to be displayed as superscript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\">String.prototype.toLocaleLowerCase()</a>","text":"<div class=\"page-text\">The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\">String.prototype.toLocaleUpperCase()</a>","text":"<div class=\"page-text\">The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\">String.prototype.toLowerCase()</a>","text":"<div class=\"page-text\">The toLowerCase() method returns the calling string value converted to lower case.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toSource\">String.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString\">String.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the specified object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\">String.prototype.toUpperCase()</a>","text":"<div class=\"page-text\">The toUpperCase() method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\">String.prototype.trim()</a>","text":"<div class=\"page-text\">The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd\">String.prototype.trimEnd()</a>","text":"<div class=\"page-text\">The trimEnd() method removes whitespace from the end of a string. trimRight() is an alias of this method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart\">String.prototype.trimStart()</a>","text":"<div class=\"page-text\">The trimStart() method removes whitespace from the beginning of a string. trimLeft() is an alias of this method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\">String.prototype.valueOf()</a>","text":"<div class=\"page-text\">The valueOf() method returns the primitive value of a String object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\">String.prototype[@@iterator]()</a>","text":"<div class=\"page-text\">The [@@iterator]() method returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw\">String.raw()</a>","text":"<div class=\"page-text\">The static String.raw() method is a tag function of template literals, similar to the r prefix in Python or the @ prefix in C# for string literals (yet there is a difference: see explanations in this issue). It's used to get the raw string form of template strings, that is, substitutions (e.g. ${foo}) are processed, but escapes (e.g. \\n) are not.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\">string.length</a>","text":"<div class=\"page-text\">The length property of a String object indicates the length of a string, in UTF-16 code units.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a>","text":"<div class=\"page-text\">The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class but is incomplete as a constructor because it does not support the syntax \"new Symbol()\".</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\">Symbol.asyncIterator</a>","text":"<div class=\"page-text\">The Symbol.asyncIterator well-known symbol specifies the default AsyncIterator for an object. If this property is set on an object, it is an async iterable and can be used in a for await...of loop.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\">Symbol.for()</a>","text":"<div class=\"page-text\">The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance\">Symbol.hasInstance</a>","text":"<div class=\"page-text\">The Symbol.hasInstance well-known symbol is used to determine if a constructor object recognizes an object as its instance. The instanceof operator's behavior can be customized by this symbol.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\">Symbol.isConcatSpreadable</a>","text":"<div class=\"page-text\">The Symbol.isConcatSpreadable well-known symbol is used to configure if an object should be flattened to its array elements when using the Array.prototype.concat() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\">Symbol.iterator</a>","text":"<div class=\"page-text\">The Symbol.iterator well-known symbol specifies the default iterator for an object. Used by for...of.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\">Symbol.keyFor()</a>","text":"<div class=\"page-text\">The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match\">Symbol.match</a>","text":"<div class=\"page-text\">The Symbol.match well-known symbol specifies the matching of a regular expression against a string. This function is called by the String.prototype.match() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\">Symbol.matchAll</a>","text":"<div class=\"page-text\">The Symbol.matchAll well-known symbol returns an iterator, that yields matches of the regular expression against a string. This function is called by the String.prototype.matchAll() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/prototype\">Symbol.prototype</a>","text":"<div class=\"page-text\">The Symbol.prototype property represents the prototype for the Symbol constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description\">Symbol.prototype.description</a>","text":"<div class=\"page-text\">The read-only description property is a string returning the optional description of Symbol objects.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toSource\">Symbol.prototype.toSource()</a>","text":"<div class=\"page-text\">The toSource() method returns a string representing the source code of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\">Symbol.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the specified Symbol object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf\">Symbol.prototype.valueOf()</a>","text":"<div class=\"page-text\">The valueOf() method returns the primitive value of a Symbol object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive\">Symbol.prototype[@@toPrimitive]</a>","text":"<div class=\"page-text\">The [@@toPrimitive]() method converts a Symbol object to a primitive value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace\">Symbol.replace</a>","text":"<div class=\"page-text\">The Symbol.replace well-known symbol specifies the method that replaces matched substrings of a string. This function is called by the String.prototype.replace() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search\">Symbol.search</a>","text":"<div class=\"page-text\">The Symbol.search well-known symbol specifies the method that returns the index within a string that matches the regular expression. This function is called by the String.prototype.search() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species\">Symbol.species</a>","text":"<div class=\"page-text\">The well-known symbol Symbol.species specifies a function-valued property that the constructor function uses to create derived objects.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split\">Symbol.split</a>","text":"<div class=\"page-text\">The Symbol.split well-known symbol specifies the method that splits a string at the indices that match a regular expression. This function is called by the String.prototype.split() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\">Symbol.toPrimitive</a>","text":"<div class=\"page-text\">The Symbol.toPrimitive is a symbol that specifies a function valued property that is called to convert an object to a corresponding primitive value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\">Symbol.toStringTag</a>","text":"<div class=\"page-text\">The Symbol.toStringTag well-known symbol is a string valued property that is used in the creation of the default string description of an object. It is accessed internally by the Object.prototype.toString() method.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables\">Symbol.unscopables</a>","text":"<div class=\"page-text\">The Symbol.unscopables well-known symbol is used to specify an object value of whose own and inherited property names are excluded from the with environment bindings of the associated object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a>","text":"<div class=\"page-text\">The SyntaxError object represents an error when trying to interpret syntactically invalid code.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/prototype\">SyntaxError.prototype</a>","text":"<div class=\"page-text\">The SyntaxError.prototype property represents the prototype for the SyntaxError constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a>","text":"<div class=\"page-text\">The TypeError object represents an error when a value is not of the expected type.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError/prototype\">TypeError.prototype</a>","text":"<div class=\"page-text\">The TypeError.prototype property represents the prototype for the TypeError constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a>","text":"<div class=\"page-text\">A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\">TypedArray.BYTES_PER_ELEMENT</a>","text":"<div class=\"page-text\">The TypedArray.BYTES_PER_ELEMENT property represents the size in bytes of each element in an typed array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from\">TypedArray.from()</a>","text":"<div class=\"page-text\">The TypedArray.from() method creates a new typed array from an array-like or iterable object. This method is nearly the same as Array.from().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\">TypedArray.name</a>","text":"<div class=\"page-text\">The TypedArray.name property represents a string value of the typed array constructor name.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of\">TypedArray.of()</a>","text":"<div class=\"page-text\">The TypedArray.of() method creates a new typed array from a variable number of arguments. This method is nearly the same as Array.of().</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\">TypedArray.prototype</a>","text":"<div class=\"page-text\">The TypedArray.prototype property represents the prototype for TypedArray constructors.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\">TypedArray.prototype.buffer</a>","text":"<div class=\"page-text\">The buffer accessor property represents the ArrayBuffer referenced by a TypedArray at construction time.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\">TypedArray.prototype.byteLength</a>","text":"<div class=\"page-text\">The byteLength accessor property represents the length (in bytes) of a typed array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\">TypedArray.prototype.byteOffset</a>","text":"<div class=\"page-text\">The byteOffset accessor property represents the offset (in bytes) of a typed array from the start of its ArrayBuffer.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\">TypedArray.prototype.copyWithin()</a>","text":"<div class=\"page-text\">The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array. This method has the same algorithm as Array.prototype.copyWithin. TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries\">TypedArray.prototype.entries()</a>","text":"<div class=\"page-text\">The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every\">TypedArray.prototype.every()</a>","text":"<div class=\"page-text\">The every() method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.every(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill\">TypedArray.prototype.fill()</a>","text":"<div class=\"page-text\">The fill() method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as Array.prototype.fill(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter\">TypedArray.prototype.filter()</a>","text":"<div class=\"page-text\">The filter() method creates a new typed array with all elements that pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.filter(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find\">TypedArray.prototype.find()</a>","text":"<div class=\"page-text\">The find() method returns a value in the typed array, if an element satisfies the provided testing function. Otherwise undefined is returned. TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex\">TypedArray.prototype.findIndex()</a>","text":"<div class=\"page-text\">The findIndex() method returns an index in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach\">TypedArray.prototype.forEach()</a>","text":"<div class=\"page-text\">The forEach() method executes a provided function once per array element. This method has the same algorithm as Array.prototype.forEach(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes\">TypedArray.prototype.includes()</a>","text":"<div class=\"page-text\">The includes() method determines whether a typed array includes a certain element, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf\">TypedArray.prototype.indexOf()</a>","text":"<div class=\"page-text\">The indexOf() method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join\">TypedArray.prototype.join()</a>","text":"<div class=\"page-text\">The join() method joins all elements of an array into a string. This method has the same algorithm as Array.prototype.join(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys\">TypedArray.prototype.keys()</a>","text":"<div class=\"page-text\">The keys() method returns a new Array Iterator object that contains the keys for each index in the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf\">TypedArray.prototype.lastIndexOf()</a>","text":"<div class=\"page-text\">The lastIndexOf() method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\">TypedArray.prototype.length</a>","text":"<div class=\"page-text\">The length accessor property represents the length (in elements) of a typed array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map\">TypedArray.prototype.map()</a>","text":"<div class=\"page-text\">The map() method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as Array.prototype.map(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\">TypedArray.prototype.move()</a>","text":"<div class=\"page-text\">The move() method used to copy the sequence of array elements within the array to the position starting at target. However, this non-standard method has been replaced with the standard TypedArray.prototype.copyWithin() method. TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce\">TypedArray.prototype.reduce()</a>","text":"<div class=\"page-text\">The reduce() method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduce(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight\">TypedArray.prototype.reduceRight()</a>","text":"<div class=\"page-text\">The reduceRight() method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduceRight(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse\">TypedArray.prototype.reverse()</a>","text":"<div class=\"page-text\">The reverse() method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\">TypedArray.prototype.set()</a>","text":"<div class=\"page-text\">The set() method stores multiple values in the typed array, reading input values from a specified array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice\">TypedArray.prototype.slice()</a>","text":"<div class=\"page-text\">The slice() method returns a shallow copy of a portion of a typed array into a new typed array object. This method has the same algorithm as Array.prototype.slice(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some\">TypedArray.prototype.some()</a>","text":"<div class=\"page-text\">The some() method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as Array.prototype.some(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort\">TypedArray.prototype.sort()</a>","text":"<div class=\"page-text\">The sort() method sorts the elements of a typed array numerically in place and returns the typed array. This method has the same algorithm as Array.prototype.sort(), except that sorts the values numerically instead of as strings. TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\">TypedArray.prototype.subarray()</a>","text":"<div class=\"page-text\">The subarray() method returns a new TypedArray on the same ArrayBuffer store and with the same element types as for this TypedArray object. The begin offset is inclusive and the end offset is exclusive. TypedArray is one of the typed array types.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString\">TypedArray.prototype.toLocaleString()</a>","text":"<div class=\"page-text\">The toLocaleString() method returns a string representing the elements of the typed array. The elements are converted to strings and are separated by a locale-specific string (such as a comma “,”). This method has the same algorithm as Array.prototype.toLocaleString() and, as the typed array elements are numbers, the same algorithm as Number.prototype.toLocaleString() applies for each element. TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString\">TypedArray.prototype.toString()</a>","text":"<div class=\"page-text\">The toString() method returns a string representing the specified array and its elements. This method has the same algorithm as Array.prototype.toString(). TypedArray is one of the typed array types here.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values\">TypedArray.prototype.values()</a>","text":"<div class=\"page-text\">The values() method returns a new Array Iterator object that contains the values for each index in the array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator\">TypedArray.prototype[@@iterator]()</a>","text":"<div class=\"page-text\">The initial value of the @@iterator property is the same function object as the initial value of the values property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@species\">get TypedArray[@@species]</a>","text":"<div class=\"page-text\">The TypedArray[@@species] accessor property returns the constructor of a typed array.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a>","text":"<div class=\"page-text\">The URIError object represents an error when a global URI handling function was used in a wrong way.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/prototype\">URIError.prototype</a>","text":"<div class=\"page-text\">The URIError.prototype property represents the prototype for the URIError constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a>","text":"<div class=\"page-text\">The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a>","text":"<div class=\"page-text\">The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a>","text":"<div class=\"page-text\">The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a>","text":"<div class=\"page-text\">The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a>","text":"<div class=\"page-text\">The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced.  The keys must be objects and the values can be arbitrary values.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/prototype\">WeakMap.prototype</a>","text":"<div class=\"page-text\">The WeakMap.prototype property represents the prototype for the WeakMap constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear\">WeakMap.prototype.clear()</a>","text":"<div class=\"page-text\">The clear() method used to remove all elements from a WeakMap object, but is no longer part of ECMAScript and its implementations.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete\">WeakMap.prototype.delete()</a>","text":"<div class=\"page-text\">The delete() method removes the specified element from a WeakMap object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get\">WeakMap.prototype.get()</a>","text":"<div class=\"page-text\">The get() method returns a specified element from a WeakMap object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has\">WeakMap.prototype.has()</a>","text":"<div class=\"page-text\">The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set\">WeakMap.prototype.set()</a>","text":"<div class=\"page-text\">The set() method adds a new element with a specified key and value to a WeakMap object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a>","text":"<div class=\"page-text\">The WeakSet object lets you store weakly held objects in a collection.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/prototype\">WeakSet.prototype</a>","text":"<div class=\"page-text\">The WeakSet.prototype property represents the prototype for the WeakSet constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add\">WeakSet.prototype.add()</a>","text":"<div class=\"page-text\">The add() method appends a new object to the end of a WeakSet object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear\">WeakSet.prototype.clear()</a>","text":"<div class=\"page-text\">The clear() method used to remove all elements from a WeakSet object, but is no longer part of ECMAScript and its implementations.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete\">WeakSet.prototype.delete()</a>","text":"<div class=\"page-text\">The delete() method removes the specified element from a WeakSet object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has\">WeakSet.prototype.has()</a>","text":"<div class=\"page-text\">The has() method returns a boolean indicating whether an object exists in a WeakSet or not.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly\">WebAssembly</a>","text":"<div class=\"page-text\">The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError\">WebAssembly.CompileError()</a>","text":"<div class=\"page-text\">The WebAssembly.CompileError() constructor creates a new WebAssembly CompileError object, which indicates an error during WebAssembly decoding or validation.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global\">WebAssembly.Global</a>","text":"<div class=\"page-text\">A WebAssembly.Global object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more WebAssembly.Module instances. This allows dynamic linking of multiple modules.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global/prototype\">WebAssembly.Global.prototype</a>","text":"<div class=\"page-text\">The WebAssembly.Global.prototype property represents the prototype for the WebAssembly.Global() constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance\">WebAssembly.Instance</a>","text":"<div class=\"page-text\">A WebAssembly.Instance object is a stateful, executable instance of a WebAssembly.Module.  Instance objects contain all the Exported WebAssembly functions that allow calling into WebAssembly code from JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance/prototype\">WebAssembly.Instance.prototype</a>","text":"<div class=\"page-text\">The WebAssembly.Instance.prototype property represents the prototype for the WebAssembly.Instance() constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance/exports\">WebAssembly.Instance.prototype.exports</a>","text":"<div class=\"page-text\">The exports readonly property of the WebAssembly.Instance object prototype returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError\">WebAssembly.LinkError()</a>","text":"<div class=\"page-text\">The WebAssembly.LinkError() constructor creates a new WebAssembly LinkError object, which indicates an error during module instantiation (besides traps from the start function).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory\">WebAssembly.Memory()</a>","text":"<div class=\"page-text\">The WebAssembly.Memory() constructor creates a new Memory object which is a resizable ArrayBuffer that holds the raw bytes of memory accessed by a WebAssembly Instance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/prototype\">WebAssembly.Memory.prototype</a>","text":"<div class=\"page-text\">The WebAssembly.Memory.prototype property represents the prototype for the WebAssembly.Memory() constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/buffer\">WebAssembly.Memory.prototype.buffer</a>","text":"<div class=\"page-text\">The buffer prototype property of the Memory object returns the buffer contained in the memory.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/grow\">WebAssembly.Memory.prototype.grow()</a>","text":"<div class=\"page-text\">The grow() protoype method of the Memory object increases the size of the memory instance by a specified number of WebAssembly pages.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\">WebAssembly.Module</a>","text":"<div class=\"page-text\">All Module instances inherit from the Module() constructor's prototype object — this can be modified to affect all Module instances.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/customSections\">WebAssembly.Module.customSections()</a>","text":"<div class=\"page-text\">The WebAssembly.customSections() function returns a copy of the contents of all custom sections in the given module with the given string name.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/exports\">WebAssembly.Module.exports()</a>","text":"<div class=\"page-text\">The WebAssembly.exports() function returns an array containing descriptions of all the declared exports of the given Module.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/imports\">WebAssembly.Module.imports()</a>","text":"<div class=\"page-text\">The WebAssembly.imports() function returns an array containing descriptions of all the declared imports of the given Module.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/prototype\">WebAssembly.Module.prototype</a>","text":"<div class=\"page-text\">The WebAssembly.Module.prototype property represents the prototype for the WebAssembly.Module() constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError\">WebAssembly.RuntimeError()</a>","text":"<div class=\"page-text\">The WebAssembly.RuntimeError() constructor creates a new WebAssembly RuntimeError object — the type that is thrown whenever WebAssembly specifies a trap.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\">WebAssembly.Table()</a>","text":"<div class=\"page-text\">The WebAssembly.Table() constructor creates a new Table object of the given size and element type.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/prototype\">WebAssembly.Table.prototype</a>","text":"<div class=\"page-text\">The WebAssembly.Table.prototype property represents the prototype for the WebAssembly.Table() constructor.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/get\">WebAssembly.Table.prototype.get()</a>","text":"<div class=\"page-text\">The get() prototype method of the WebAssembly.Table() object retrieves a function reference stored at a given index.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/grow\">WebAssembly.Table.prototype.grow()</a>","text":"<div class=\"page-text\">The grow() prototype method of the WebAssembly.Table object increases the size of the Table instance by a specified number of elements.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/length\">WebAssembly.Table.prototype.length</a>","text":"<div class=\"page-text\">The length prototype property of the WebAssembly.Table object returns the length of the table, i.e. the number of elements in the table.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/set\">WebAssembly.Table.prototype.set()</a>","text":"<div class=\"page-text\">The set() prototype method of the WebAssembly.Table object mutates a reference stored at a given index to a different value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile\">WebAssembly.compile()</a>","text":"<div class=\"page-text\">The WebAssembly.compile() function compiles a WebAssembly.Module from WebAssembly binary code.  This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the WebAssembly.instantiate() function should be used).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming\">WebAssembly.compileStreaming()</a>","text":"<div class=\"page-text\">The WebAssembly.compileStreaming() function compiles a WebAssembly.Module directly from a streamed underlying source.  This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the WebAssembly.instantiateStreaming() function should be used).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate\">WebAssembly.instantiate()</a>","text":"<div class=\"page-text\">The WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code. This function has two overloads:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming\">WebAssembly.instantiateStreaming()</a>","text":"<div class=\"page-text\">The WebAssembly.instantiateStreaming() function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate\">WebAssembly.validate()</a>","text":"<div class=\"page-text\">The WebAssembly.validate() function validates a given typed array of WebAssembly binary code, returning whether the bytes form a valid wasm module (true) or not (false).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a>","text":"<div class=\"page-text\">The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a>","text":"<div class=\"page-text\">The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a>","text":"<div class=\"page-text\">The encodeURI() function encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a>","text":"<div class=\"page-text\">The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a>","text":"<div class=\"page-text\">The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a>","text":"<div class=\"page-text\">The eval() function evaluates JavaScript code represented as a string.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a>","text":"<div class=\"page-text\">The global globalThis property contains the global this value, which is akin to the global object. (See below for more details).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a>","text":"<div class=\"page-text\">The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a>","text":"<div class=\"page-text\">The isNaN() function determines whether a value is NaN or not. Note: coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\">null</a>","text":"<div class=\"page-text\">The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a>","text":"<div class=\"page-text\">The parseFloat() function parses an argument and returns a floating point number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a>","text":"<div class=\"page-text\">The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a>","text":"<div class=\"page-text\">The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a>","text":"<div class=\"page-text\">The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Usually, decodeURI or decodeURIComponent are preferred over unescape.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\">uneval()</a>","text":"<div class=\"page-text\">The uneval() function creates a string representation of the source code of an Object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements\">Statements and declarations</a>","text":"<div class=\"page-text\">JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function\">Legacy generator function</a>","text":"<div class=\"page-text\">The legacy generator function statement declares legacy generator functions with the specified parameters.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>","text":"<div class=\"page-text\">The async function declaration defines an asynchronous function, which returns an AsyncFunction object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\">block</a>","text":"<div class=\"page-text\">A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\">break</a>","text":"<div class=\"page-text\">The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\">class</a>","text":"<div class=\"page-text\">The class declaration creates a new class with a given name using prototype-based inheritance.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a>","text":"<div class=\"page-text\">Constants are block-scoped, much like variables defined using the let statement. The value of a constant cannot change through reassignment, and it can't be redeclared.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\">continue</a>","text":"<div class=\"page-text\">The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a>","text":"<div class=\"page-text\">The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/default\">default</a>","text":"<div class=\"page-text\">The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a>","text":"<div class=\"page-text\">The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a>","text":"<div class=\"page-text\">An empty statement is used to provide no statement, although the JavaScript syntax would expect one.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">export</a>","text":"<div class=\"page-text\">The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">for</a>","text":"<div class=\"page-text\">The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a>","text":"<div class=\"page-text\">The for await...of statement creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\">for each...in</a>","text":"<div class=\"page-text\">The for each...in statement iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a>","text":"<div class=\"page-text\">The for...in statement iterates over all non-Symbol, enumerable properties of an object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a>","text":"<div class=\"page-text\">The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a>","text":"<div class=\"page-text\">The function declaration (function statement) defines a function with the specified parameters.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">function*</a>","text":"<div class=\"page-text\">The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a>","text":"<div class=\"page-text\">The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a>","text":"<div class=\"page-text\">The static import statement is used to import bindings which are exported by another module.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta\">import.meta</a>","text":"<div class=\"page-text\">The import.meta object is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the module, like the module's URL.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\">label</a>","text":"<div class=\"page-text\">The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a>","text":"<div class=\"page-text\">The let statement declares a block scope local variable, optionally initializing it to a value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\">return</a>","text":"<div class=\"page-text\">The return statement ends function execution and specifies a value to be returned to the function caller.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\">switch</a>","text":"<div class=\"page-text\">The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\">throw</a>","text":"<div class=\"page-text\">The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a>","text":"<div class=\"page-text\">The try...catch statement marks a block of statements to try, and specifies a response, should an exception be thrown.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">var</a>","text":"<div class=\"page-text\">The var statement declares a variable, optionally initializing it to a value.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\">while</a>","text":"<div class=\"page-text\">The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\">with</a>","text":"<div class=\"page-text\">The with statement extends the scope chain for a statement.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a>","text":"<div class=\"page-text\">JavaScript's strict mode, introduced in ECMAScript 5, is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of \"sloppy mode\". Strict mode isn't just a subset: it intentionally has different semantics from normal code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a>","text":"<div class=\"page-text\">ECMAScript 5 introduced strict mode which is now implemented in all major browsers (including IE10). While making web browsers interpret code as strict is easy (just add 'use strict'; at the top of your source code), transitioning an existing code base to strict mode requires a bit more work.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">Template literals (Template strings)</a>","text":"<div class=\"page-text\">Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them. They were called \"template strings\" in prior editions of the ES2015 specification.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas\">Trailing commas</a>","text":"<div class=\"page-text\">Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can simply add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Shells\">JavaScript shells</a>","text":"<div class=\"page-text\">A JavaScript shell allows you to quickly test snippets of JavaScript code without having to reload a web page. They are extremely useful for developing and debugging code.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a>","text":"<div class=\"page-text\">Whereas HTML defines a webpage's structure and content and CSS sets the formatting and appearance, JavaScript adds interactivity to a webpage and creates rich web applications.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a>","text":"<div class=\"page-text\">JavaScript typed arrays are array-like objects and provide a mechanism for accessing raw binary data. As you may already know, Array objects grow and shrink dynamically and can have any JavaScript value. JavaScript engines perform optimizations so that these arrays are fast. However, as web applications become more and more powerful, adding features such as audio and video manipulation, access to raw data using WebSockets, and so forth, it has become clear that there are times when it would be helpful for JavaScript code to be able to quickly and easily manipulate raw binary data in typed arrays.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management\">Memory Management</a>","text":"<div class=\"page-text\">Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions\">Microsoft JavaScript extensions</a>","text":"<div class=\"page-text\">Microsoft browsers (Internet Explorer, and in a few cases, Microsoft Edge) support a number of special Microsoft extensions to the otherwise standard JavaScript APIs.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/at-cc-on\">@cc_on</a>","text":"<div class=\"page-text\">The @cc_on statement activates conditional compilation support within comments in a script.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/at-if\">@if</a>","text":"<div class=\"page-text\">The @if statement conditionally executes a group of statements, depending on the value of an expression.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/at-set\">@set</a>","text":"<div class=\"page-text\">The @set statement creates variables used with conditional compilation statements.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/ActiveXObject\">ActiveXObject</a>","text":"<div class=\"page-text\">The ActiveXObject Object enables and returns a reference to an automation object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Date.getVarDate\">Date.getVarDate()</a>","text":"<div class=\"page-text\">The getVarDate method returns a VT_DATE value from a Date object.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug\">Debug</a>","text":"<div class=\"page-text\">The debug object is an instrinsic global object that sends output to a debugger.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/debuggerEnabled\">Debug.debuggerEnabled</a>","text":"<div class=\"page-text\">The debug.debuggerEnabled property determines whether debugging is enabled for the script context. Debugging may be enabled or disabled whether or not a debugger is attached.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/msTraceAsyncCallbackCompleted\">Debug.msTraceAsyncCallbackCompleted</a>","text":"<div class=\"page-text\">Indicates that the callback stack associated with a previously specified asynchronous operation has completed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/msTraceAsyncOperationCompleted\">Debug.msTraceAsyncCallbackCompleted</a>","text":"<div class=\"page-text\">The debug.msTraceAsyncCallbackCompleted function indicates that an asynchronous operation has completed.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/msTraceAsyncCallbackStarting\">Debug.msTraceAsyncCallbackStarting</a>","text":"<div class=\"page-text\">The debug.msTraceAsyncCallbackStarting function associates the callback stack with a previously specified asynchronous operation.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/msTraceAsyncOperationStarting\">Debug.msTraceAsyncOperationStarting</a>","text":"<div class=\"page-text\">Initiates a trace for an asynchronous operation.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/msUpdateAsyncCallbackRelation\">Debug.msUpdateAsyncCallbackRelation</a>","text":"<div class=\"page-text\">The debug.msUpdateAsyncCallbackRelation function updates the relationship status between a synchronous work item and the associated asynchronous operation.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/setNonUserCodeExceptions\">Debug.setNonUserCodeExceptions</a>","text":"<div class=\"page-text\">If this property is set to true within a given scope, the debugger can then choose whether to take some specified action on exceptions thrown inside that scope: for instance, if the developer wishes to break on user-unhandled exceptions. Setting this property to false is the same as never having set the property.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/write\">Debug.write</a>","text":"<div class=\"page-text\">The debug.write function sends strings to the script debugger.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Debug/writeln\">Debug.writeln</a>","text":"<div class=\"page-text\">The debug.writeln function sends strings to the script debugger, followed by a newline character.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Enumerator\">Enumerator</a>","text":"<div class=\"page-text\">The Enumerator object enables enumeration of items in a collection.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Enumerator/atEnd\">Enumerator.atEnd</a>","text":"<div class=\"page-text\">The Enumerator.atEnd method returns a Boolean value indicating if the enumerator is at the end of the collection.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Enumerator/item\">Enumerator.item</a>","text":"<div class=\"page-text\">The Enumerator.item method returns the current item in the collection.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Enumerator/moveFirst\">Enumerator.moveFirst</a>","text":"<div class=\"page-text\">The Enumerator.moveFirst method resets the current item in the collection to the first item.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Enumerator/moveNext\">Enumerator.moveNext</a>","text":"<div class=\"page-text\">The Enumerator.moveNext method moves the current item to the next item in the collection.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Error.description\">Error.description</a>","text":"<div class=\"page-text\">The Error.description property returns or sets the descriptive string associated with a specific error.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Error.number\">Error.number</a>","text":"<div class=\"page-text\">The Error.number property returns or sets the numeric value associated with a specific error. The Error object's default property is number.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/Error.stackTraceLimit\">Error.stackTraceLimit</a>","text":"<div class=\"page-text\">The Error.stackTraceLimit property gets or sets the stack trace limit, which is equivalent to the number of error frames to display. The default limit is 10.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/GetObject\">GetObject</a>","text":"<div class=\"page-text\">The GetObject function returns a reference to an Automation object from a file.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/ScriptEngine\">ScriptEngine()</a>","text":"<div class=\"page-text\">The ScriptEngine function gets the name of the scripting language in use.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/ScriptEngineBuildVersion\">ScriptEngineBuildVersion</a>","text":"<div class=\"page-text\">The ScriptEngineBuildVersion function bets the build version number of the scripting engine in use.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/ScriptEngineMajorVersion\">ScriptEngineMajorVersion</a>","text":"<div class=\"page-text\">The ScriptEngineMajorVersion function gets the major version number of the scripting engine in use.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/ScriptEngineMinorVersion\">ScriptEngineMinorVersion</a>","text":"<div class=\"page-text\">The ScriptEngineMinorVersion function gets the minor version number of the scripting engine in use.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/VBArray\">VBArray</a>","text":"<div class=\"page-text\">The VBArray object provides access to Visual Basic safe arrays.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/VBArray/dimensions\">VBArray.dimensions</a>","text":"<div class=\"page-text\">The VBArray.dimensions method returns the number of dimensions in a VBArray.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/VBArray/getItem\">VBArray.getItem</a>","text":"<div class=\"page-text\">The VBArray.getItem method returns the item at the specified location.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/VBArray/lbound\">VBArray.lbound</a>","text":"<div class=\"page-text\">The VBArray.lbound method returns the lowest index value used in the specified dimension of a VBArray.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/VBArray/toArray\">VBArray.toArray</a>","text":"<div class=\"page-text\">The VBArray.toArray method returns a standard JavaScript array converted from a VBArray.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Microsoft_Extensions/VBArray/ubound\">VBArray.ubound</a>","text":"<div class=\"page-text\">The VBArray.ubound method returns the highest index value used in the specified dimension of the VBArray.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript\">New in JavaScript</a>","text":"<div class=\"page-text\">This chapter contains information about JavaScript's version history and implementation status for Mozilla/SpiderMonkey-based JavaScript applications, such as Firefox.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla\">ECMAScript 2015 support in Mozilla</a>","text":"<div class=\"page-text\">ECMAScript 2015 is the sixth edition of the ECMAScript Language Specification standard. It defines the standard for the JavaScript implementation in SpiderMonkey, the engine used in Firefox and other Mozilla applications.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_5_support_in_Mozilla\">ECMAScript 5 support in Mozilla</a>","text":"<div class=\"page-text\">ECMAScript 5.1, an older version of the standard upon which JavaScript is based, was approved in June 2011.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/Firefox_JavaScript_changelog\">Firefox JavaScript changelog</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript features in Firefox releases.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.1\">New in JavaScript 1.1</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript from Netscape Navigator 2.0 to 3.0. The old Netscape documentation references this as \"Features added after version 1\". Netscape Navigator 3.0 was released on August 19, 1996. Netscape Navigator 3.0 was the second major version of the browser with JavaScript support.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.2\">New in JavaScript 1.2</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript from Netscape Navigator 3.0 to 4.0. The old Netscape documentation can be found on archive.org. Netscape Navigator 4.0 was released on June 11, 1997. Netscape Navigator 4.0 was the third major version of the browser with JavaScript support.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.3\">New in JavaScript 1.3</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript from Netscape Navigator 4.0 to 4.5. The old Netscape documentation can be found on archive.org. Netscape Navigator 4.5 was released on October 19, 1998.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.4\">New in JavaScript 1.4</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript 1.4, which was only used for Netscape's server side JavaScript released in 1999. The old Netscape documentation can be found on archive.org.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.5\">New in JavaScript 1.5</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript 1.5. This version was included in Netscape Navigator 6.0 was released on November 14, 2000 and was also used in later versions of Netscape Navigator and Firefox 1.0. You can compare JavaScript 1.5 to JScript version 5.5 and Internet Explorer 5.5, which was released in July 2000. The corresponding ECMA standard is ECMA-262 Edition 3 (from December 1999).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.6\">New in JavaScript 1.6</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript 1.6. This version was included in Firefox 1.5 (Gecko 1.8), which was released in November 2005. The corresponding ECMA standard is ECMA-262 Edition 3 and ECMAScript for XML (E4X) with some additional features. Several new features were introduced: E4X, several new Array methods, and Array and String generics.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7\">New in JavaScript 1.7</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript 1.7. This version was included in Firefox 2 (October 2006).</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.8\">New in JavaScript 1.8</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript 1.8. This version was included in Firefox 3 and is part of Gecko 1.9. See bug 380236 for a tracking development bug for JavaScript 1.8.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.8.1\">New in JavaScript 1.8.1</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript 1.8.1. This version was included in Firefox 3.5.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.8.5\">New in JavaScript 1.8.5</a>","text":"<div class=\"page-text\">The following is a changelog for JavaScript 1.8.5. This version was included in Firefox 4.</div>"},{"link":"<a class=\"page-link \"href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/The_performance_hazards_of__%5B%5BPrototype%5D%5D_mutation\">The performance hazards of [[Prototype]] mutation</a>","text":"<div class=\"page-text\"></div>"}]